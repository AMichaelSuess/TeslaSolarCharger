@using TeslaSolarCharger.Shared.Contracts
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared
@inject INodePatternTypeHelper NodePatternTypeHelper


<InputComponent ValueId="@($"{IdPrefix}Url")"
                LabelText="@($"{Purpose} Url")"
                UnitText=""
                HelpText="">
    <InputFragment>
        <InputText id="@($"{IdPrefix}Url")" @bind-Value="Url" class="form-control" placeholder=" " />
    </InputFragment>
</InputComponent>

@if (SolarValueSource == SolarValueSource.Modbus)
{
    <div class="form-group mb-3">
        <InputCheckbox id="@($"{IdPrefix}IsModbusUrl")" @bind-Value="IsModbusUrl" class="form-check-input" />
        <label for="@($"{IdPrefix}IsModbusUrl")">Use Modbus Url Creation Tool</label>
        <div>
            <small class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
        </div>
    </div>
    @if (IsModbusUrl)
    {
        <ModbusUrlCreationComponent @bind-ModbusUrl="Url"
                            @bind-ModbusUrl:event="ModbusUrlChanged" />
    }
}
else
{
    <div class="mb-3">
        @if (Headers.Count > 0)
        {
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
            <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
        }
        @for (var i = 0; i < Headers.Count; i++)
        {
            var header = Headers.ElementAt(i);
            <div>
                <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="@($"{IdPrefix}headerKey{i}")" name="headerKey"
               @onchange="@(e => UpdateHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="@($"{IdPrefix}headerValue{i}")" name="headerValue"
               @onchange="@(e => Headers[header.Key] = e.Value?.ToString() ?? string.Empty)">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveHeader(header.Key)">DEL</button>
            </div>
        }
    </div>

    <div><button type="button" class="btn btn-secondary mb-3" @onclick="AddNewHeader">Add new header</button></div>

}


@code {
    [Parameter]
#pragma warning disable CS8618
    public string Purpose { get; set; }
#pragma warning restore CS8618

    private string IdPrefix => Purpose.Replace(" ", "");

    [Parameter]
    public SolarValueSource SolarValueSource { get; set; }

    [Parameter]
    public string? Url
    {
        get => _url;
        set
        {
            if (_url == value) return;
            _url = value;
            UrlChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> UrlChanged { get; set; }


    [Parameter]
    public bool IsModbusUrl
    {
        get => _isModbusUrl;
        set
        {
            if (_isModbusUrl == value) return;
            _isModbusUrl = value;
            IsModbusUrlChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsModbusUrlChanged { get; set; }

    [Parameter]
    public Dictionary<string, string> Headers { get; set; } = null!;

    [Parameter]
    public EventCallback<Dictionary<string, string>> HeadersChanged { get; set; }


    private void UpdateHeaderKey(string oldKey, string newKey)
    {
        var value = Headers[oldKey];
        Headers.Remove(oldKey);
        Headers.Add(newKey, value);
        HeadersChanged.InvokeAsync(Headers);
    }

    private void AddNewHeader()
    {
        Headers.Add($"{Headers.Count + 1}", "");
        HeadersChanged.InvokeAsync(Headers);
    }

    private void RemoveHeader(string key)
    {
        Headers.Remove(key);
        HeadersChanged.InvokeAsync(Headers);
    }

    private string? _url;
    private bool _isModbusUrl;


}
