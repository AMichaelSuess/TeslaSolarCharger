@using Microsoft.AspNetCore.Components
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums


<label class="col-5 col-sm-4 col-md-3 col-lg-2" for="nodePatternType">Result Type:</label>
<InputSelect @bind-Value="@NodePatternType" id="nodePatternType" name="nodePatternType">

    @foreach (var value in Enum.GetValues<NodePatternType>())
    {
        <option value="@value">@value.ToFriendlyString()</option>
    }
</InputSelect>
@if (NodePatternType == TeslaSolarCharger.Shared.Enums.NodePatternType.Json)
{
    <div class="form-group">
        <label for="JsonPattern">@(RestValue) Json Pattern</label>
        <InputText id="JsonPattern" @bind-Value="JsonPattern" placeholder="$.data.overage" class="form-control" />
    </div>
}
@if (NodePatternType == TeslaSolarCharger.Shared.Enums.NodePatternType.Xml)
{
    <div class="form-group">
        <label for="XmlPattern">@(RestValue) XML Pattern</label>
        <InputText id="XmlPattern" @bind-Value="XmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
    </div>
    <div class="form-group">
        <label for="XmlAttributeHeaderName">@(RestValue) XML Attribute Header Name</label>
        <InputText id="XmlAttributeHeaderName" @bind-Value="XmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="XmlAttributeHeaderValue">@(RestValue) XML Attribute Header Value</label>
        <InputText id="XmlAttributeHeaderValue" @bind-Value="XmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
    </div>
    <div class="form-group">
        <label for="XmlAttributeValueName">@(RestValue) XML Attribute Header Value</label>
        <InputText id="XmlAttributeValueName" @bind-Value="XmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
    </div>
}

@code {
    [Parameter]
    public string RestValue { get; set; }

    [Parameter]
    public NodePatternType? NodePatternType
    {
        get => _nodePatternType;
        set
        {
            if (_nodePatternType == value) return;
            _nodePatternType = value;
            NodePatternTypeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<NodePatternType?> NodePatternTypeChanged { get; set; }

    [Parameter]
    public string? JsonPattern
    {
        get => _jsonPattern;
        set
        {
            if (_jsonPattern == value) return;
            _jsonPattern = value;
            JsonPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> JsonPatternChanged { get; set; }

    [Parameter]
    public string? XmlPattern
    {
        get => _xmlPattern;
        set
        {
            if (_xmlPattern == value) return;
            _xmlPattern = value;
            XmlPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlPatternChanged { get; set; }

    [Parameter]
    public string? XmlAttributeHeaderName
    {
        get => _xmlAttributeHeaderName;
        set
        {
            if (_xmlAttributeHeaderName == value) return;
            _xmlAttributeHeaderName = value;
            XmlAttributeHeaderNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderNameChanged { get; set; }

    [Parameter]
    public string? XmlAttributeHeaderValue
    {
        get => _xmlAttributeHeaderValue;
        set
        {
            if (_xmlAttributeHeaderValue == value) return;
            _xmlAttributeHeaderValue = value;
            XmlAttributeHeaderValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderValueChanged { get; set; }

    [Parameter]
    public string? XmlAttributeValueName
    {
        get => _xmlAttributeValueName;
        set
        {
            if (_xmlAttributeValueName == value) return;
            _xmlAttributeValueName = value;
            XmlAttributeValueNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeValueNameChanged { get; set; }


    private NodePatternType? _nodePatternType;

    private string? _jsonPattern;
    private string? _xmlPattern;
    private string? _xmlAttributeHeaderName;
    private string? _xmlAttributeHeaderValue;
    private string? _xmlAttributeValueName;
}
