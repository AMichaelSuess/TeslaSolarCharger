@using Microsoft.AspNetCore.Components
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.SharedModel.Enums


<InputComponent ValueId="@($"{IdPrefix}nodePatternType")"
                LabelText="Result Type"
                UnitText=""
                HelpText="">
    <InputFragment>
        <InputSelect class="form-control" @bind-Value="@NodePatternType" id="@($"{IdPrefix}nodePatternType")">

            @foreach (var value in Enum.GetValues<NodePatternType>())
            {
                <option value="@value">@value.ToFriendlyString()</option>
            }
        </InputSelect>
    </InputFragment>
</InputComponent>
@if (NodePatternType == TeslaSolarCharger.SharedModel.Enums.NodePatternType.Json)
{
    <InputComponent ValueId="@($"{IdPrefix}JsonPattern")"
                    LabelText="@($"{Purpose} Json Pattern")"
                    UnitText=""
                    HelpText="">
        <InputFragment>
            <InputText id="@($"{IdPrefix}JsonPattern")" @bind-Value="JsonPattern" placeholder="$.data.overage" class="form-control" />
        </InputFragment>
    </InputComponent>
}
@if (NodePatternType == TeslaSolarCharger.SharedModel.Enums.NodePatternType.Xml)
{
    <InputComponent ValueId="@($"{IdPrefix}XmlPattern")"
                    LabelText="@($"{Purpose} XML Pattern")"
                    UnitText=""
                    HelpText="">
        <InputFragment>
            <InputText id="@($"{IdPrefix}XmlPattern")" @bind-Value="XmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </InputFragment>
    </InputComponent>

    <InputComponent ValueId="@($"{IdPrefix}XmlAttributeHeaderName")"
                    LabelText="@($"{Purpose} XML Attribute Header Name")"
                    UnitText=""
                    HelpText="">
        <InputFragment>
            <InputText id="@($"{IdPrefix}XmlAttributeHeaderName")" @bind-Value="XmlAttributeHeaderName" placeholder=" " class="form-control" />
        </InputFragment>
    </InputComponent>

    <InputComponent ValueId="@($"{IdPrefix}XmlAttributeHeaderValue")"
                LabelText="@($"{Purpose} XML Attribute Header Value")"
                UnitText=""
                HelpText="">
        <InputFragment>
            <InputText id="@($"{IdPrefix}XmlAttributeHeaderValue")" @bind-Value="XmlAttributeHeaderValue" placeholder=" " class="form-control" />
        </InputFragment>
    </InputComponent>

    <InputComponent ValueId="@($"{IdPrefix}XmlAttributeValueName")"
                LabelText="@($"{Purpose} XML Attribute Value Name")"
                    UnitText=""
                    HelpText="">
        <InputFragment>
            <InputText id="@($"{IdPrefix}XmlAttributeValueName")" @bind-Value="XmlAttributeValueName" placeholder=" " class="form-control" />
        </InputFragment>
    </InputComponent>
}

@code {
    [Parameter]
#pragma warning disable CS8618
        public string Purpose { get; set; }
#pragma warning restore CS8618

    private string IdPrefix => Purpose.Replace(" ", "");
#pragma warning disable BL0007
    [Parameter]
    public NodePatternType? NodePatternType
    {
        get => _nodePatternType;
        set
        {
            if (_nodePatternType == value) return;
            _nodePatternType = value;
            NodePatternTypeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<NodePatternType?> NodePatternTypeChanged { get; set; }

    [Parameter]
    public string? JsonPattern
    {
        get => _jsonPattern;
        set
        {
            if (_jsonPattern == value) return;
            _jsonPattern = value;
            JsonPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> JsonPatternChanged { get; set; }

    [Parameter]
    public string? XmlPattern
    {
        get => _xmlPattern;
        set
        {
            if (_xmlPattern == value) return;
            _xmlPattern = value;
            XmlPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlPatternChanged { get; set; }

    [Parameter]
    public string? XmlAttributeHeaderName
    {
        get => _xmlAttributeHeaderName;
        set
        {
            if (_xmlAttributeHeaderName == value) return;
            _xmlAttributeHeaderName = value;
            XmlAttributeHeaderNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderNameChanged { get; set; }

    [Parameter]
    public string? XmlAttributeHeaderValue
    {
        get => _xmlAttributeHeaderValue;
        set
        {
            if (_xmlAttributeHeaderValue == value) return;
            _xmlAttributeHeaderValue = value;
            XmlAttributeHeaderValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderValueChanged { get; set; }

    [Parameter]
    public string? XmlAttributeValueName
    {
        get => _xmlAttributeValueName;
        set
        {
            if (_xmlAttributeValueName == value) return;
            _xmlAttributeValueName = value;
            XmlAttributeValueNameChanged.InvokeAsync(value);
        }
    }
#pragma warning restore BL0007

    [Parameter]
    public EventCallback<string> XmlAttributeValueNameChanged { get; set; }


    private NodePatternType? _nodePatternType;

    private string? _jsonPattern;
    private string? _xmlPattern;
    private string? _xmlAttributeHeaderName;
    private string? _xmlAttributeHeaderValue;
    private string? _xmlAttributeValueName;
}
