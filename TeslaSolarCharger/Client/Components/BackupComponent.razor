@page "/backupAndRestore"

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<h1>Backup and Restore</h1>
<div>During the backup or restore process all TSC actions will be stopped and started again after the Backup</div>

<h2>Backup</h2>

<MudButton Disabled="@(_processingBackup || _processingRestore)" OnClick="StartBackup" Variant="Variant.Filled" Color="Color.Primary">
    @if (_processingBackup)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Processing</MudText>
    }
    else
    {
        <MudText>Start Backup</MudText>
    }
</MudButton>

<hr />
<h2>Restore</h2>

<div class="mb-2">
    <MudFileUpload T="IBrowserFile" FilesChanged="SelectFile" Accept=".zip" MaximumFileCount="1">
        <ButtonTemplate Context="fileUploadContext">
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.AttachFile"
                       for="@fileUploadContext">
                Select Backup File
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
</div>

@if (_file != default)
{
    <div class="mb-2">
        @_file.Name <code>@((_file.Size * 0.000001).ToString("0.00")) MB</code>
    </div>
}

<MudButton Disabled="@(_processingBackup || _processingRestore)" OnClick="StartRestore" Variant="Variant.Filled" Color="Color.Primary">
    @if (_processingRestore)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Processing</MudText>
    }
    else
    {
        <MudText>Start restore</MudText>
    }
</MudButton>


@code {
    private bool _processingBackup;
    private bool _processingRestore;

    private IBrowserFile? _file;


    private async Task StartBackup()
    {
        _processingBackup = true;
        StateHasChanged();
        var fileName = "TSCBackup.zip";
        var url = "api/BaseConfiguration/DownloadBackup";
        // ReSharper disable once UseConfigureAwaitFalse
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, url);
        _processingBackup = false;
        StateHasChanged();
    }

    private void SelectFile(IBrowserFile file)
    {
        var maxFileSize = 1024 * 1024 * 1024; // 1024 MB
        if (file.Size > maxFileSize)
        {
            Snackbar.Add($"{file.Name} is greater than {maxFileSize / 1024 / 1024} and won't be uploaded."
                , Severity.Error, (options) => { options.CloseAfterNavigation = true; });
        }
        _file = file;
    }

    private Task StartRestore()
    {
        _processingRestore = true;
        _processingRestore = false;
        throw new NotImplementedException();
    }

}
