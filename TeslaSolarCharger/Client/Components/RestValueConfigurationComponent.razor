@using TeslaSolarCharger.Shared.Dtos.RestValueConfiguration
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.SharedModel.Enums
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos
@inject HttpClient HttpClient
@inject IConstants Constants
@inject IStringHelper StringHelper
@inject ISnackbar Snackbar

<h2>REST Value configuration</h2>

<div class="d-flex flex-wrap justify-content-evenly">
    @foreach (var restValueConfiguration in RestValueConfigurations)
    {
        <div class="align-self-center">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6"><TextShortenComponent InputString="@restValueConfiguration.Url"
                                                                      ShouldDisplayTruncatedCharCount="false"
                                                                      MaxLength="25"
                                                                      ShouldDisplayCopyButton="false"
                                                                      TooltipText="@restValueConfiguration.Url"></TextShortenComponent></MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @* @foreach *@
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-0">
                            <MudIcon Icon="@Constants.GridPoleIcon"></MudIcon>
                        </div>
                        <div class="flex-grow-1">
                            <MudChip Text="grey">Default</MudChip>
                        </div>
                    </div>
                    <MudText>This day everything happened.</MudText>
                    <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
            }
        </div>

<MudDataGrid Items="RestValueConfigurations" Groupable="true" Filterable="false"
             Hover="true" Virtualize="true" FixedHeader="true" FixedFooter="true"
             Height="auto">
    <Columns>
        <HierarchyColumn T="DtoRestValueConfiguration" />
        <PropertyColumn Property="x => x.HttpMethod"
                        Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueConfiguration.HttpMethod))"></PropertyColumn>
        <PropertyColumn Property="x => x.Url"
                        Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueConfiguration.Url))">
            <CellTemplate>
                <TextShortenComponent InputString="@context.Item.Url" ShouldDisplayTruncatedCharCount="false" MaxLength="25"></TextShortenComponent>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NodePatternType"
                        Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueConfiguration.NodePatternType))"></PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudFab Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"></MudFab>
                    <MudFab Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"></MudFab>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudDataGrid T="DtoRestValueConfigurationHeader" ServerData="@(_ => GetHeaders(context.Item.Id))">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Headers</MudText>
                <MudSpacer />
                <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"></MudFab>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Key"
                                Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueConfigurationHeader.Key))"></PropertyColumn>
                <PropertyColumn Property="x => x.Value"
                                Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueConfigurationHeader.Value))"></PropertyColumn>
                <TemplateColumn CellClass="d-flex justify-end" Context="columnContext">
                    <CellTemplate>
                        <MudStack Row>
                            <MudFab Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"></MudFab>
                            <MudFab Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"></MudFab>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        
        @{
            if(context.Item.NodePatternType != NodePatternType.Direct && _requestResults.TryGetValue(context.Item.Id, out var value))
            {
                <div class="p-2 border rounded">
                    <h3>Current request result</h3>
                    @value
                </div>
            }
        }
        
        <MudDataGrid T="DtoRestValueResultConfiguration" ServerData="@(_ => GetResultConfigurations(context.Item.Id))">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Value Configs</MudText>
                <MudSpacer />
                <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"></MudFab>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.UsedFor"
                                Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueResultConfiguration.UsedFor))"></PropertyColumn>
                <PropertyColumn Property="x => x.Operator"
                                Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueResultConfiguration.Operator))"></PropertyColumn>
                <PropertyColumn Property="x => x.CorrectionFactor"
                                Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoRestValueResultConfiguration.CorrectionFactor))"></PropertyColumn>
                <TemplateColumn Title="Current raw value" Context="column">
                    <CellTemplate>
                        @{
                            if(_rawValues.TryGetValue(context.Item.Id, out var value))
                            {
                                <span class="strong">@value</span>
                            }
                            else
                            {
                                <span>Not available</span>
                            }
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Current calculated value" Context="column">
                    <CellTemplate>
                        @{
                            if (_calculatedValues.TryGetValue(context.Item.Id, out var value))
                            {
                                <span class="strong">@value</span>
                            }
                            else
                            {
                                <span>Not available</span>
                            }
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn CellClass="d-flex justify-end" Context="ColumnContext">
                    <CellTemplate>
                        <MudStack Row>
                            <MudFab Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"></MudFab>
                            <MudFab Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"></MudFab>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </ChildRowContent>
</MudDataGrid>

@foreach (var editableItem in EditableItems)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        <h3>HTTP Request configuration</h3>
        <EditFormComponent T="DtoRestValueConfiguration" WrappedElement="editableItem" OnValidSubmit="(item) => HandleValidSubmit(item)">
            <ChildContent>
                <div class="p-2">
                    <MudSelect T="HttpVerb"
                               Class="@Constants.DefaultMargin"
                               Variant="Variant.Outlined"
                               Value="@editableItem.Item.HttpMethod"
                               ValueChanged="(newItem) => UpdateHttpVerb(editableItem.Item, newItem)"
                               Label="HTTP Method">
                        @foreach (HttpVerb item in Enum.GetValues(typeof(HttpVerb)))
                        {
                            <MudSelectItem T="HttpVerb" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <GenericInput T="string" For="() => editableItem.Item.Url" OnValueChanged="StateHasChanged"></GenericInput>
                <div class="p-2">
                    <MudSelect T="NodePatternType"
                               Class="@Constants.DefaultMargin"
                               Variant="Variant.Outlined"
                               Value="@editableItem.Item.NodePatternType"
                               ValueChanged="@((newValue) => UpdateNodePatternType(editableItem.Item, newValue))"
                               Label="Node Pattern Type">
                        @foreach (NodePatternType item in Enum.GetValues(typeof(NodePatternType)))
                        {
                            <MudSelectItem T="NodePatternType" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </ChildContent>
        </EditFormComponent>
        @if (editableItem.Item.Id != default && !editableItem.EditContext.IsModified())
        {
            <div class="shadow p-3 mb-5 bg-white rounded">
                <RestValueHeaderConfigurationComponent ParentId="editableItem.Item.Id"></RestValueHeaderConfigurationComponent>
            </div>
            <div class="shadow p-3 mb-5 bg-white rounded">
                <RestValueResultConfigurationComponent ParentId="editableItem.Item.Id"
                                                       NodePatternType="editableItem.Item.NodePatternType"></RestValueResultConfigurationComponent>
            </div>
        }
        else
        {
            <div class="p-2">
                Save Data to enable result configuration
            </div>

        }
    </div>
}
<RightAlignedButtonComponent ButtonText="Add REST Call"
                             IsDisabled="RestValueConfigurations.Any(r => r.Id == default)"
                             OnButtonClicked="() => RestValueConfigurations.Add(new DtoRestValueConfiguration())"></RightAlignedButtonComponent>

@code {
    private Dictionary<int, string> _requestResults = new();
    private Dictionary<int, string> _rawValues = new();
    private Dictionary<int, decimal> _calculatedValues = new();

    private List<DtoRestValueConfiguration> RestValueConfigurations { get; set; } = new();

    private List<EditableItem<DtoRestValueConfiguration>> EditableItems => RestValueConfigurations.Select(restValueConfiguration => new EditableItem<DtoRestValueConfiguration>(restValueConfiguration)).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadRestValueConfigurations();
        await RefreshRequestResults();
        await RefreshRawValues();
        await RefreshCalculatedValues();

    }

    private async Task LoadRestValueConfigurations()
    {
        var restValueConfigurations = await HttpClient.GetFromJsonAsync<List<DtoRestValueConfiguration>>("/api/RestValueConfiguration/GetAllRestValueConfigurations");
        RestValueConfigurations = restValueConfigurations ?? new List<DtoRestValueConfiguration>();
    }

    private void UpdateNodePatternType(DtoRestValueConfiguration restValueConfiguration, NodePatternType newItem)
    {
        restValueConfiguration.NodePatternType = newItem;
        StateHasChanged();
    }

    private void UpdateHttpVerb(DtoRestValueConfiguration restValueConfiguration, HttpVerb newItem)
    {
        restValueConfiguration.HttpMethod = newItem;
        StateHasChanged();
    }

    private async Task HandleValidSubmit(DtoRestValueConfiguration item)
    {
        var result = await HttpClient.PostAsJsonAsync("/api/RestValueConfiguration/UpdateRestValueConfiguration", item);
        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Failed to update REST value configuration", Severity.Error);
            return;
        }
        var resultContent = await result.Content.ReadFromJsonAsync<DtoValue<int>>();
        if (resultContent == default)
        {
            Snackbar.Add("Failed to update REST value configuration", Severity.Error);
            return;
        }

        Snackbar.Add("Rest value configuration saved.", Severity.Success);
        item.Id = resultContent.Value;
    }

    private Task<GridData<DtoRestValueConfiguration>> GetChildContent(GridState<DtoRestValueConfiguration> arg)
    {
        
        return Task.FromResult(new GridData<DtoRestValueConfiguration>
        {
            Items = new List<DtoRestValueConfiguration>(),
            TotalItems = 0
        });
    }

    private async Task<GridData<DtoRestValueConfigurationHeader>> GetHeaders(int itemId)
    {
        var elements = await HttpClient.GetFromJsonAsync<List<DtoRestValueConfigurationHeader>>($"api/RestValueConfiguration/GetHeadersByConfigurationId?parentId={itemId}");
        var result = elements ?? new List<DtoRestValueConfigurationHeader>();
        return new GridData<DtoRestValueConfigurationHeader>
        {
            Items = result,
            TotalItems = result.Count,
        };
    }

    private async Task<GridData<DtoRestValueResultConfiguration>> GetResultConfigurations(int itemId)
    {
        var elements = await HttpClient.GetFromJsonAsync<List<DtoRestValueResultConfiguration>>($"api/RestValueConfiguration/GetResultConfigurationsByConfigurationId?parentId={itemId}");
        var result = elements ?? new List<DtoRestValueResultConfiguration>();
        return new GridData<DtoRestValueResultConfiguration>
        {
            Items = result,
            TotalItems = result.Count,
        };
    }

    
    private async Task RefreshRequestResults()
    {
        _requestResults = await HttpClient.GetFromJsonAsync<Dictionary<int, string>>("api/Hello/GetRawRestRequestResults") ?? new Dictionary<int, string>();
    }

    private async Task RefreshRawValues()
    {
        _rawValues = await HttpClient.GetFromJsonAsync<Dictionary<int, string>>("api/Hello/GetRawRestRequestResults") ?? new Dictionary<int, string>();
    }

    private async Task RefreshCalculatedValues()
    {
        _calculatedValues = await HttpClient.GetFromJsonAsync<Dictionary<int, decimal>>("api/Hello/GetCalculatedRestValue") ?? new Dictionary<int, decimal>();
    }
}
