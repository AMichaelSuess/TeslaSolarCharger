@using TeslaSolarCharger.Shared.Dtos.RestValueConfiguration
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.SharedModel.Enums
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos
@inject HttpClient HttpClient
@inject IConstants Constants
@inject IStringHelper StringHelper
@inject ISnackbar Snackbar

@foreach (var editableItem in EditableItems)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        <EditFormComponent T="DtoRestValueConfiguration" WrappedElement="editableItem" OnValidSubmit="(item) => HandleValidSubmit(item)">
            <ChildContent>
                <div class="p-2">
                    <MudSelect T="HttpVerb"
                               Class="@Constants.DefaultMargin"
                               Variant="Variant.Outlined"
                               Value="@editableItem.Item.HttpMethod"
                               ValueChanged="(newItem) => UpdateHttpVerb(editableItem.Item, newItem)"
                               Label="HTTP Method">
                        @foreach (HttpVerb item in Enum.GetValues(typeof(HttpVerb)))
                        {
                            <MudSelectItem T="HttpVerb" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <GenericInput T="string" For="() => editableItem.Item.Url" OnValueChanged="StateHasChanged"></GenericInput>
                <div class="p-2">
                    <MudSelect T="NodePatternType"
                               Class="@Constants.DefaultMargin"
                               Variant="Variant.Outlined"
                               Value="@editableItem.Item.NodePatternType"
                               ValueChanged="@((newValue) => UpdateNodePatternType(editableItem.Item, newValue))"
                               Label="Node Pattern Type">
                        @foreach (NodePatternType item in Enum.GetValues(typeof(NodePatternType)))
                        {
                            <MudSelectItem T="NodePatternType" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </ChildContent>
        </EditFormComponent>
        @if (editableItem.Item.Id != default && !editableItem.EditContext.IsModified())
        {
            <RestValueResultConfigurationComponent ParentId="editableItem.Item.Id"
                                                   NodePatternType="editableItem.Item.NodePatternType"></RestValueResultConfigurationComponent>
        }
        else
        {
            <div class="p-2">
                Save Data to enable result configuration
            </div>
            
        }
    </div>
}
<RightAlignedButtonComponent ButtonText="Add REST Call"
                             IsDisabled="RestValueConfigurations.Any(r => r.Id == default)"
                             OnButtonClicked="() => RestValueConfigurations.Add(new DtoRestValueConfiguration())"></RightAlignedButtonComponent>

@code {

    private List<DtoRestValueConfiguration> RestValueConfigurations { get; set; } = new();

    private List<EditableItem<DtoRestValueConfiguration>> EditableItems => RestValueConfigurations.Select(restValueConfiguration => new EditableItem<DtoRestValueConfiguration>(restValueConfiguration)).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadRestValueConfigurations();

    }

    private async Task LoadRestValueConfigurations()
    {
        var restValueConfigurations = await HttpClient.GetFromJsonAsync<List<DtoRestValueConfiguration>>("/api/RestValueConfiguration/GetAllRestValueConfigurations");
        RestValueConfigurations = restValueConfigurations ?? new List<DtoRestValueConfiguration>();
    }

    private void UpdateNodePatternType(DtoRestValueConfiguration restValueConfiguration, NodePatternType newItem)
    {
        restValueConfiguration.NodePatternType = newItem;
        StateHasChanged();
    }

    private void UpdateHttpVerb(DtoRestValueConfiguration restValueConfiguration, HttpVerb newItem)
    {
        restValueConfiguration.HttpMethod = newItem;
        StateHasChanged();
    }

    private async Task HandleValidSubmit(DtoRestValueConfiguration item)
    {
        var result = await HttpClient.PostAsJsonAsync("/api/RestValueConfiguration/UpdateRestValueConfiguration", item);
        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Failed to update REST value configuration", Severity.Error);
            return;
        }
        var resultContent = await result.Content.ReadFromJsonAsync<DtoValue<int>>();
        if (resultContent == default)
        {
            Snackbar.Add("Failed to update REST value configuration", Severity.Error);
            return;
        }
        item.Id = resultContent.Value;
    }

}
