@using System.Web
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums


<div class="mb-3">
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusUnitIdentifier")">Unit Identifier:</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@ModbusUnitIdentifier" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusUnitIdentifier")" name="modbusUnitIdentifier">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="registerType">Register Type:</label>
        <InputSelect @bind-Value="@RegisterType" id="registerType" name="registerType">

            @foreach (var value in Enum.GetValues<ModbusRegisterType>())
            {

                <option value="@value">@value.ToFriendlyString()</option>
            }
        </InputSelect>
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="valueType">Value Type:</label>
        <InputSelect @bind-Value="@ValueType" id="valueType" name="valueType">

            @foreach (var value in Enum.GetValues<ModbusValueType>())
            {

                <option value="@value">@value.ToFriendlyString()</option>
            }
        </InputSelect>
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusStartingAddress")">Register Address:</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@StartingAddress" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusStartingAddress")" name="modbusStartingAddress">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusQuantity")">Number of Registers:</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@Quantity" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusQuantity")" name="modbusQuantity">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusIpAddress")">IP address:</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@IpAddress" @bind:event="oninput" type="text" id="@($"{IdPrefix}ModbusIpAddress")" name="modbusIpAddress">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusPort")">Port:</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@Port" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusPort")" name="modbusPort">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}SwapRegisters")">Swap Register (bigEndian / littleEndian):</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@SwapRegisters" type="checkbox" id="@($"{IdPrefix}SwapRegisters")" name="swapRegisters">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusConnectDelaySeconds")">Connect Delay (seconds):</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@ConnectDelaySeconds" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusConnectDelaySeconds")" name="modbusConnectDelaySeconds">
    </div>
    <div>
        <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="@($"{IdPrefix}ModbusTimeoutSeconds")">Read Timeout (seconds):</label>
        <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@TimeoutSeconds" @bind:event="oninput" type="number" id="@($"{IdPrefix}ModbusTimeoutSeconds")" name="modbusTimeoutSeconds">
    </div>
    <hr/>
</div>


@code {

    #region HelperProperties
    private string? ModbusUnitIdentifier
    {
        get => _modbusUnitIdentifier;
        set
        {
            _modbusUnitIdentifier = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? StartingAddress
    {
        get => _startingAddress;
        set
        {
            _startingAddress = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? Quantity
    {
        get => _quantity;
        set
        {
            _quantity = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? IpAddress
    {
        get => _ipAddress;
        set
        {
            _ipAddress = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? Port
    {
        get => _port;
        set
        {
            _port = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? ConnectDelaySeconds
    {
        get => _connectDelaySeconds;
        set
        {
            _connectDelaySeconds = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private string? TimeoutSeconds
    {
        get => _timeoutSeconds;
        set
        {
            _timeoutSeconds = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private ModbusRegisterType? RegisterType
    {
        get => _modbusRegisterType;
        set
        {
            _modbusRegisterType = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private ModbusValueType? ValueType
    {
        get => _modbusValueType;
        set
        {
            _modbusValueType = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private bool? SwapRegisters
    {
        get => _swapRegisters;
        set
        {
            _swapRegisters = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    #endregion

    private string? _modbusUnitIdentifier;
    private string? _startingAddress;
    private string? _quantity;
    private string? _ipAddress;
    private string? _port;
    private string? _connectDelaySeconds;
    private string? _timeoutSeconds;
    private ModbusRegisterType? _modbusRegisterType;
    private ModbusValueType? _modbusValueType;
    private bool? _swapRegisters;


    [Parameter]
    public string? ModbusUrl { get; set; }

    [Parameter]
#pragma warning disable CS8618
    public string IdPrefix { get; set; }
#pragma warning restore CS8618


    [Parameter]
    public EventCallback<string> ModbusUrlChanged { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ModbusUrl))
        {
            ModbusUrl = "http://modbusplugin/api/Modbus/GetTypedValue?unitIdentifier=3&startingAddress=&quantity=&ipAddress=&port=502&factor=1&connectDelaySeconds=1&timeoutSeconds=2&modbusValueType=0&modbusRegisterType=0";
        }
        if (!string.IsNullOrEmpty(ModbusUrl) && ModbusUrl.StartsWith("http://modbusplugin/api/Modbus/"))
        {
            var uri = new Uri(ModbusUrl);
            ModbusUnitIdentifier = HttpUtility.ParseQueryString(uri.Query).Get("unitIdentifier");
            StartingAddress = HttpUtility.ParseQueryString(uri.Query).Get("startingAddress");
            Quantity = HttpUtility.ParseQueryString(uri.Query).Get("quantity");
            IpAddress = HttpUtility.ParseQueryString(uri.Query).Get("ipAddress");
            Port = HttpUtility.ParseQueryString(uri.Query).Get("port");
            ConnectDelaySeconds = HttpUtility.ParseQueryString(uri.Query).Get("connectDelaySeconds");
            TimeoutSeconds = HttpUtility.ParseQueryString(uri.Query).Get("timeoutSeconds");
            var modbusValueTypeString = HttpUtility.ParseQueryString(uri.Query).Get("modbusValueType");
            if (string.IsNullOrEmpty(modbusValueTypeString))
            {
                ValueType = null;
                var methodName = uri.Segments.Last();
                if (methodName.Equals("GetValue", StringComparison.CurrentCultureIgnoreCase) || methodName.Equals("GetInt32Value", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Int;
                }
                else if (methodName.Equals("GetInt16Value", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Short;
                }
                else if (methodName.Equals("GetFloatValue", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Float;
                }
                else
                {
                    ValueType = ModbusValueType.Int;
                }
            }
            else
            {
                ValueType = (ModbusValueType?)Enum.Parse(typeof(ModbusValueType), modbusValueTypeString);
            }
            var modbusRegisterTypeString = HttpUtility.ParseQueryString(uri.Query).Get("modbusRegisterType");
            if (string.IsNullOrEmpty(modbusRegisterTypeString))
            {
                RegisterType = ModbusRegisterType.HoldingRegister;
            }
            else
            {
                RegisterType = (ModbusRegisterType?)Enum.Parse(typeof(ModbusRegisterType), modbusRegisterTypeString);
            }
            var registerSwapString = HttpUtility.ParseQueryString(uri.Query).Get("registerSwap");
            if (string.IsNullOrEmpty(registerSwapString))
            {
                SwapRegisters = false;
            }
            else
            {
                SwapRegisters = Boolean.Parse(registerSwapString);
            }
        }
        return Task.CompletedTask;
    }

    private async Task UpdateUrlFromModbusValues()
    {
        ModbusUrl = $"http://modbusplugin/api/Modbus/GetTypedValue?unitIdentifier={ModbusUnitIdentifier}&startingAddress={StartingAddress}&quantity={Quantity}&ipAddress={IpAddress}&port={Port}&connectDelaySeconds={ConnectDelaySeconds}&timeoutSeconds={TimeoutSeconds}&modbusValueType={ValueType}&modbusRegisterType={RegisterType}&registerSwap={SwapRegisters}";
        await ModbusUrlChanged.InvokeAsync(ModbusUrl).ConfigureAwait(false);
    }
}