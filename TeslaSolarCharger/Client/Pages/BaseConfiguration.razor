@page "/BaseConfiguration"
@using TeslaSolarCharger.Client.Components
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using System.Web
@inject HttpClient HttpClient
@inject IToastService ToastService

<PageTitle>Base Configuration</PageTitle>

<h3>Base Configuration</h3>

@if (_dtoBaseConfiguration == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_dtoBaseConfiguration" OnValidSubmit="@HandleValidSubmit">
        <hr />
        <div class="form-group">
            <label for="carPriorities">Car Ids</label>
            <InputText id="carPriorities" @bind-Value="_dtoBaseConfiguration.CarPriorities" placeholder="1|3|2" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Car Ids separated by '|'. Note: The order of the IDs is the order of power distribution.</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="solarMqttServer">Solar Mqtt-Server</label>
            <InputText id="solarMqttServer" @bind-Value="_dtoBaseConfiguration.SolarMqttServer" class="form-control" />
            <div>
                <small id="solarMqttServer" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="solarMqttUserName">Solar Mqtt Username</label>
            <InputText id="solarMqttUserName" @bind-Value="_dtoBaseConfiguration.SolarMqttUserName" placeholder="username" class="form-control" />
            <div>
                <small id="solarMqttUserNameHelp" class="form-text text-muted">Leave this blank if your mqtt server does not need authentication</small>
            </div>
        </div>
        <div class="form-group">
            <label for="solarMqttPassword">Solar Mqtt Password</label>
            <InputText type="password" id="solarMqttPassword" @bind-Value="_dtoBaseConfiguration.SolarMqttPassword" placeholder="secret" class="form-control" />
            <div>
                <small id="solarMqttUserNameHelp" class="form-text text-muted">Leave this blank if your mqtt server does not need authentication</small>
            </div>
        </div>
        <div class="form-group">
            <label for="currentPowerToGridMqttTopic">Grid Power Mqtt-Topic</label>
            <InputText id="currentPowerToGridMqttTopic" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridMqttTopic" class="form-control" />
            <div>
                <small id="currentPowerToGridMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="powerBuffer">Power Buffer (Watt)</label>
            <InputNumber id="powerBuffer" @bind-Value="_dtoBaseConfiguration.PowerBuffer" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Set values higher than 0 to e.g. charge your home battery first, or lower than minimum adjustable power to charge your car first (e.g. 230V * 1A * 3 phases => -691W).</small>
        </div>
        <RestPvValueComponent 
            RestValue="Grid Power"
            @bind-Url="_dtoBaseConfiguration.CurrentPowerToGridUrl"
            @bind-Url:event="UrlChanged"
            @bind-CorrectionFactor="_dtoBaseConfiguration.CurrentPowerToGridCorrectionFactorString"
            @bind-CorrectionFactor:event="CorrectionFactorChanged"
            @bind-IsModbusUrl="_dtoBaseConfiguration.IsModbusGridUrl"
            @bind-IsModbusUrl:event="IsModbusUrlChanged"
            @bind-Headers="_dtoBaseConfiguration.CurrentPowerToGridHeaders"
            @bind-Headers:event="HeadersChanged"
            @bind-JsonPattern="_dtoBaseConfiguration.CurrentPowerToGridJsonPattern"
            @bind-JsonPattern:event="JsonPatternChanged"
            @bind-XmlPattern="_dtoBaseConfiguration.CurrentPowerToGridXmlPattern"
            @bind-XmlPattern:event="XmlPatternChanged"
            @bind-XmlAttributeHeaderName="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderName"
            @bind-XmlAttributeHeaderName:event="XmlAttributeHeaderNameChanged"
            @bind-XmlAttributeHeaderValue="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderValue"
            @bind-XmlAttributeHeaderValue:event="XmlAttributeHeaderValueChanged"
            @bind-XmlAttributeValueName="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeValueName"
            @bind-XmlAttributeValueName:event="XmlAttributeValueNameChanged"
            />
        <hr />
        <div class="form-group">
            <label for="homeBatteryMinSoc">Home Battery Minimum Soc (%)</label>
            <InputNumber id="homeBatteryMinSoc" @bind-Value="_dtoBaseConfiguration.HomeBatteryMinSoc" class="form-control" />
            <small id="homeBatteryMinSocHelp" class="form-text text-muted">Set the SoC your home battery should get charged to before cars start to use full power.</small>
        </div>
        <div class="form-group">
            <label for="homeBatteryChargingPower">Home Battery charging power (W)</label>
            <InputNumber id="homeBatteryChargingPower" @bind-Value="_dtoBaseConfiguration.HomeBatteryChargingPower" class="form-control" />
            <small id="homeBatteryChargingPowerHelp" class="form-text text-muted">Set the power your home battery should charge with as long as SoC is below set minimum SoC.</small>
        </div>
        <div class="form-group">
            <label for="homeBatterySocMqttTopic">HomeBatterySoc Mqtt-Topic</label>
            <InputText id="homeBatterySocMqttTopic" @bind-Value="_dtoBaseConfiguration.HomeBatterySocMqttTopic" class="form-control" />
            <div>
                <small id="homeBatterySocMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <RestPvValueComponent 
            RestValue="Home Battery SoC"
            @bind-Url="_dtoBaseConfiguration.HomeBatterySocUrl"
            @bind-Url:event="UrlChanged"
            @bind-CorrectionFactor="_dtoBaseConfiguration.HomeBatterySocCorrectionFactorString"
            @bind-CorrectionFactor:event="CorrectionFactorChanged"
            @bind-IsModbusUrl="_dtoBaseConfiguration.IsModbusHomeBatterySocUrl"
            @bind-IsModbusUrl:event="IsModbusUrlChanged"
            @bind-Headers="_dtoBaseConfiguration.HomeBatterySocHeaders"
            @bind-Headers:event="HeadersChanged"
            @bind-JsonPattern="_dtoBaseConfiguration.HomeBatterySocJsonPattern"
            @bind-JsonPattern:event="JsonPatternChanged"
            @bind-XmlPattern="_dtoBaseConfiguration.HomeBatterySocXmlPattern"
            @bind-XmlPattern:event="XmlPatternChanged"
            @bind-XmlAttributeHeaderName="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderName"
            @bind-XmlAttributeHeaderName:event="XmlAttributeHeaderNameChanged"
            @bind-XmlAttributeHeaderValue="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderValue"
            @bind-XmlAttributeHeaderValue:event="XmlAttributeHeaderValueChanged"
            @bind-XmlAttributeValueName="_dtoBaseConfiguration.HomeBatterySocXmlAttributeValueName"
            @bind-XmlAttributeValueName:event="XmlAttributeValueNameChanged"
        />
        <hr />
        <div class="form-group">
            <label for="homeBatteryPowerMqttTopic">HomeBatteryPower Mqtt-Topic</label>
            <InputText id="homeBatteryPowerMqttTopic" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerMqttTopic" class="form-control" />
            <div>
                <small id="homeBatteryPowerMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <RestPvValueComponent 
            RestValue="Home Battery Power"
            @bind-Url="_dtoBaseConfiguration.HomeBatteryPowerUrl"
            @bind-Url:event="UrlChanged"
            @bind-CorrectionFactor="_dtoBaseConfiguration.HomeBatteryPowerCorrectionFactorString"
            @bind-CorrectionFactor:event="CorrectionFactorChanged"
            @bind-IsModbusUrl="_dtoBaseConfiguration.IsModbusHomeBatteryPowerUrl"
            @bind-IsModbusUrl:event="IsModbusUrlChanged"
            @bind-Headers="_dtoBaseConfiguration.HomeBatteryPowerHeaders"
            @bind-Headers:event="HeadersChanged"
            @bind-JsonPattern="_dtoBaseConfiguration.HomeBatteryPowerJsonPattern"
            @bind-JsonPattern:event="JsonPatternChanged"
            @bind-XmlPattern="_dtoBaseConfiguration.HomeBatteryPowerXmlPattern"
            @bind-XmlPattern:event="XmlPatternChanged"
            @bind-XmlAttributeHeaderName="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderName"
            @bind-XmlAttributeHeaderName:event="XmlAttributeHeaderNameChanged"
            @bind-XmlAttributeHeaderValue="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderValue"
            @bind-XmlAttributeHeaderValue:event="XmlAttributeHeaderValueChanged"
            @bind-XmlAttributeValueName="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeValueName"
            @bind-XmlAttributeValueName:event="XmlAttributeValueNameChanged"
        />
        
        <hr />
        <div class="form-group">
            <label for="currentInverterPowerMqttTopic">Inverter Power Mqtt-Topic</label>
            <InputText id="currentInverterPowerMqttTopic" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerMqttTopic" class="form-control" />
            <div>
                <small id="currentInverterPowerMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <RestPvValueComponent 
            RestValue="Home Battery Power"
            @bind-Url="_dtoBaseConfiguration.CurrentInverterPowerUrl"
            @bind-Url:event="UrlChanged"
            @bind-CorrectionFactor="_dtoBaseConfiguration.CurrentInverterPowerCorrectionFactorString"
            @bind-CorrectionFactor:event="CorrectionFactorChanged"
            @bind-IsModbusUrl="_dtoBaseConfiguration.IsModbusCurrentInverterPowerUrl"
            @bind-IsModbusUrl:event="IsModbusUrlChanged"
            @bind-Headers="_dtoBaseConfiguration.CurrentInverterPowerHeaders"
            @bind-Headers:event="HeadersChanged"
            @bind-JsonPattern="_dtoBaseConfiguration.CurrentInverterPowerJsonPattern"
            @bind-JsonPattern:event="JsonPatternChanged"
            @bind-XmlPattern="_dtoBaseConfiguration.CurrentInverterPowerXmlPattern"
            @bind-XmlPattern:event="XmlPatternChanged"
            @bind-XmlAttributeHeaderName="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderName"
            @bind-XmlAttributeHeaderName:event="XmlAttributeHeaderNameChanged"
            @bind-XmlAttributeHeaderValue="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderValue"
            @bind-XmlAttributeHeaderValue:event="XmlAttributeHeaderValueChanged"
            @bind-XmlAttributeValueName="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeValueName"
            @bind-XmlAttributeValueName:event="XmlAttributeValueNameChanged"
        />
        <hr />
        <div class="form-group">
            <label for="updateIntervalSeconds">Car Power Adjustment Intervall (seconds)</label>
            <InputNumber id="updateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.UpdateIntervalSeconds" class="form-control" />
            <div>
                <small id="updateIntervalSecondsHelp" class="form-text text-muted">Note: It is not possible to use values below 25 seconds here, as there is a delay between the car changing its current and the Tesla API getting notified about this change.</small>
            </div>
        </div>
        <div class="form-group">
            <label for="pvValueUpdateIntervalSeconds">Solar plant adjustment intervall (seconds)</label>
            <InputNumber id="pvValueUpdateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.PvValueUpdateIntervalSeconds" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOn">Time with enough solar power until charging starts (minutes)</label>
            <InputNumber id="minutesUntilSwitchOn" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOn" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOff">Time without enough solar power until charging stops (minutes)</label>
            <InputNumber id="minutesUntilSwitchOff" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOff" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateApiBaseUrl">Teslamate API Base Url</label>
            <InputText id="teslaMateApiBaseUrl" @bind-Value="_dtoBaseConfiguration.TeslaMateApiBaseUrl" placeholder="http://teslamateapi:8080" class="form-control" />
            <small id="teslaMateApiBaseUrlHelp" class="form-text text-muted">You can use the name of the container and the default port even though you changed the external port.</small>
        </div>
        <div class="form-group">
            <label for="geoFence">Relevant Geofence</label>
            <InputText id="geoFence" @bind-Value="_dtoBaseConfiguration.GeoFence" placeholder="Home" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You have to add a geofence with the same name in TeslaMate</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateDbServer">TeslaMate Database Server Name</label>
            <InputText id="teslaMateDbServer" @bind-Value="_dtoBaseConfiguration.TeslaMateDbServer" placeholder="database" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the name of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbPort">TeslaMate Database Server Port</label>
            <InputNumber id="teslaMateDbPort" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPort" placeholder="5432" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the internal port of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbUser">TeslaMate Database Username</label>
            <InputText id="teslaMateDbUser" @bind-Value="_dtoBaseConfiguration.TeslaMateDbUser" placeholder="username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="teslaMateDbPassword">TeslaMate Database Server Password</label>
            <InputText type="password" id="teslaMateDbPassword" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPassword" placeholder="secret" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Mosquito servername</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.MosquitoServer" placeholder="mosquitto" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Mqqt ClientId</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.MqqtClientId" placeholder="TeslaSolarCharger" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Telegram Bot Key</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.TelegramBotKey" placeholder="1234567890:ASDFuiauhwerlfvasedr" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Telegram Channel ID</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.TelegramChannelId" placeholder="-156480125" class="form-control" />
        </div>
        <hr />
        <DataAnnotationsValidator />
        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private DtoBaseConfiguration? _dtoBaseConfiguration;

    protected override async Task OnInitializedAsync()
    {
        _dtoBaseConfiguration = await HttpClient.GetFromJsonAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration").ConfigureAwait(false);
    }

    private void UpdateGridHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentPowerToGridHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewGridHeader()
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add($"{_dtoBaseConfiguration?.CurrentPowerToGridHeaders.Count + 1}", "");
    }

    private void RemoveGridHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(key);
    }

    private void UpdateInverterHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentInverterPowerHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewInverterHeader()
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add($"{_dtoBaseConfiguration?.CurrentInverterPowerHeaders.Count + 1}", "");
    }

    private void RemoveInverterHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(key);
    }

    private void UpdateHomeBatterySocHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatterySocHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatterySocHeader()
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add($"{_dtoBaseConfiguration?.HomeBatterySocHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatterySocHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(key);
    }

    private void UpdateHomeBatteryPowerHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatteryPowerHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatteryPowerHeader()
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add($"{_dtoBaseConfiguration?.HomeBatteryPowerHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatteryPowerHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(key);
    }

    private async Task HandleValidSubmit()
    {
        var result = await HttpClient.PutAsJsonAsync("api/BaseConfiguration/UpdateBaseConfiguration", _dtoBaseConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Base Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating base configuration");
        }
    }
}
