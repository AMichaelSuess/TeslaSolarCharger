@page "/BaseConfiguration"
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using System.Web
@inject HttpClient HttpClient
@inject IToastService ToastService

<PageTitle>Base Configuration</PageTitle>

<h3>Base Configuration</h3>

@if (_dtoBaseConfiguration == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_dtoBaseConfiguration" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <hr />
        <div class="form-group">
            <label for="carPriorities">Car Ids</label>
            <InputText id="carPriorities" @bind-Value="_dtoBaseConfiguration.CarPriorities" placeholder="1|3|2" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Car Ids separated by '|'. Note: The order of the IDs is the order of power distribution.</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="currentPowerToGridUrl">Grid Power Url</label>
            <InputText id="currentPowerToGridUrl" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridCorrectionFactor">Correction Factor</label>
            <InputText id="currentPowerToGridCorrectionFactor" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridCorrectionFactorString" class="form-control" />
            <div>
                <small id="currentPowerToGridCorrectionFactorHelp" class="form-text text-muted">Use this if consuming 1 W from the grid is not the value 1. E.g. if sending 1500 Watt to the grid is returned as 1.5 you have to enter -1000 here</small>
            </div>
        </div>
        <div class="form-group">
            <label for="powerBuffer">Power Buffer (Watt)</label>
            <InputNumber id="powerBuffer" @bind-Value="_dtoBaseConfiguration.PowerBuffer" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Set values higher than 0 to e.g. charge your home battery first, or lower than minimum adjustable power to charge your car first (e.g. 230V * 1A * 3 phases => -691W).</small>
        </div>
        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusGridUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusGridUrl)
        {
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusUnitIdentifier">Unit Identifier:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridModbusUnitIdentifier" @bind:event="oninput" type="number" id="gridModbusUnitIdentifier" name="gridModbusUnitIdentifier">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusStartingAddress">Register Address:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridStartingAddress" @bind:event="oninput" type="number" id="gridModbusStartingAddress" name="gridModbusStartingAddress">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusQuantity">Number of Registers:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridQuantity" @bind:event="oninput" type="number" id="gridModbusQuantity" name="gridModbusQuantity">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusIpAddress">IP address:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridIpAddress" @bind:event="oninput" type="text" id="gridModbusIpAddress" name="gridModbusIpAddress">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusPort">Port:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridPort" @bind:event="oninput" type="number" id="gridModbusPort" name="gridModbusPort">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusConnectDelaySeconds">Connect Delay (seconds):</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridConnectDelaySeconds" @bind:event="oninput" type="number" id="gridModbusConnectDelaySeconds" name="gridModbusConnectDelaySeconds">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="gridModbusTimeoutSeconds">Read Timeout (seconds):</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@GridTimeoutSeconds" @bind:event="oninput" type="number" id="gridModbusTimeoutSeconds" name="gridModbusTimeoutSeconds">
            </p>
        }
        else
        {
            if (_dtoBaseConfiguration.CurrentPowerToGridHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            for (var i = 0; i < _dtoBaseConfiguration.CurrentPowerToGridHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.CurrentPowerToGridHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateGridHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.CurrentPowerToGridHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveGridHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewGridHeader()">Add new header</button></p>
        }
        <div class="form-group">
            <label for="currentPowerToGridJsonPattern">Grid Power Json Pattern</label>
            <InputText id="currentPowerToGridJsonPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlPattern">Grid Power XML Pattern</label>
            <InputText id="currentPowerToGridXmlPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeHeaderName">Grid Power XML Attribute Header Name</label>
            <InputText id="currentPowerToGridXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeHeaderValue">Grid Power XML Attribute Header Value</label>
            <InputText id="currentPowerToGridXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeValueName">Grid Power XML Attribute Header Value</label>
            <InputText id="currentPowerToGridXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="homeBatteryMinSoc">Home Battery Minimum Soc (%)</label>
            <InputNumber id="homeBatteryMinSoc" @bind-Value="_dtoBaseConfiguration.HomeBatteryMinSoc" class="form-control" />
            <small id="homeBatteryMinSocHelp" class="form-text text-muted">Set the SoC your home battery should get charged to before cars start to use full power.</small>
        </div>
        <div class="form-group">
            <label for="homeBatteryChargingPower">Home Battery charging power (W)</label>
            <InputNumber id="homeBatteryChargingPower" @bind-Value="_dtoBaseConfiguration.HomeBatteryChargingPower" class="form-control" />
            <small id="homeBatteryChargingPowerHelp" class="form-text text-muted">Set the power your home battery should charge with as long as SoC is below set minimum SoC.</small>
        </div>
        <div class="form-group">
            <label for="homeBatterySocUrl">HomeBatterySoc Url</label>
            <InputText id="homeBatterySocUrl" @bind-Value="_dtoBaseConfiguration.HomeBatterySocUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocCorrectionFactor">Correction Factor</label>
            <InputText id="homeBatterySocCorrectionFactor" @bind-Value="_dtoBaseConfiguration.HomeBatterySocCorrectionFactorString" class="form-control" />
            <div>
                <small id="homeBatterySocCorrectionFactorHelp" class="form-text text-muted">Use this if 1% SoC is not the value 1. E.g. if at 1% SoC the homeBattery returns 0.01 enter 100</small>
            </div>
        </div>

        @if (_dtoBaseConfiguration.HomeBatterySocHeaders.Count > 0)
        {
        <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
        <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
        }
        @for (var i = 0; i < _dtoBaseConfiguration.HomeBatterySocHeaders.Count; i++)
        {
            var header = _dtoBaseConfiguration.HomeBatterySocHeaders.ElementAt(i);
            <p>
                <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateHomeBatterySocHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.HomeBatterySocHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveHomeBatterySocHeader(header.Key)">DEL</button>
            </p>
        }
        <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewHomeBatterySocHeader()">Add new header</button></p>
        <div class="form-group">
            <label for="homeBatterySocJsonPattern">Home Battery Soc Json Pattern</label>
            <InputText id="homeBatterySocJsonPattern" @bind-Value="_dtoBaseConfiguration.HomeBatterySocJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlPattern">Home Battery Soc XML Pattern</label>
            <InputText id="homeBatterySocXmlPattern" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeHeaderName">Home Battery Soc XML Attribute Header Name</label>
            <InputText id="homeBatterySocXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeHeaderValue">Home Battery Soc XML Attribute Header Value</label>
            <InputText id="homeBatterySocXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeValueName">Home Battery Soc XML Attribute Header Value</label>
            <InputText id="homeBatterySocXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerUrl">HomeBatteryPower Url</label>
            <InputText id="homeBatteryPowerUrl" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerCorrectionFactor">Correction Factor</label>
            <InputText id="homeBatteryPowerCorrectionFactor" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerCorrectionFactorString" class="form-control" />
            <div>
                <small id="homeBatteryPowerCorrectionFactorHelp" class="form-text text-muted">Use this if consuming 1 W from your home batter is not the value -1. E.g. if charging 1500 Watt to your home battery is returned as 1.5 you have to enter 1000 here</small>
            </div>
        </div>

        @if (_dtoBaseConfiguration.HomeBatteryPowerHeaders.Count > 0)
        {
        <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
        <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
        }
        @for (var i = 0; i < _dtoBaseConfiguration.HomeBatteryPowerHeaders.Count; i++)
        {
            var header = _dtoBaseConfiguration.HomeBatteryPowerHeaders.ElementAt(i);
            <p>
                <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateHomeBatteryPowerHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.HomeBatteryPowerHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveHomeBatteryPowerHeader(header.Key)">DEL</button>
            </p>
        }
        <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewHomeBatteryPowerHeader()">Add new header</button></p>
        <div class="form-group">
            <label for="homeBatteryPowerJsonPattern">Home Battery Power Json Pattern</label>
            <InputText id="homeBatteryPowerJsonPattern" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlPattern">Home Battery Power XML Pattern</label>
            <InputText id="homeBatteryPowerXmlPattern" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeHeaderName">Home Battery Power XML Attribute Header Name</label>
            <InputText id="homeBatteryPowerXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeHeaderValue">Home Battery Power XML Attribute Header Value</label>
            <InputText id="homeBatteryPowerXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeValueName">Home Battery Power XML Attribute Header Value</label>
            <InputText id="homeBatteryPowerXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="currentInverterPowerUrl">Inverter Power Url</label>
            <InputText id="currentInverterPowerUrl" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerCorrectionFactor">Correction Factor</label>
            <InputText id="currentInverterPowerCorrectionFactor" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerCorrectionFactorString" class="form-control" />
            <div>
                <small id="currentInverterPowerCorrectionFactorHelp" class="form-text text-muted">Factor to multiply the result value with. E.g. if your inverter returns kW instead of W enter 1000.</small>
            </div>
        </div>
        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusInverterUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusInverterUrl)
        {
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusUnitIdentifier">Unit Identifier:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterModbusUnitIdentifier" @bind:event="oninput" type="number" id="inverterModbusUnitIdentifier" name="inverterModbusUnitIdentifier">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusStartingAddress">Register Address:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterStartingAddress" @bind:event="oninput" type="number" id="inverterModbusStartingAddress" name="inverterModbusStartingAddress">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusQuantity">Number of Registers:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterQuantity" @bind:event="oninput" type="number" id="inverterModbusQuantity" name="inverterModbusQuantity">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusIpAddress">IP address:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterIpAddress" @bind:event="oninput" type="text" id="inverterModbusIpAddress" name="inverterModbusIpAddress">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusPort">Port:</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterPort" @bind:event="oninput" type="number" id="inverterModbusPort" name="inverterModbusPort">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusConnectDelaySeconds">Connect Delay (seconds):</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterConnectDelaySeconds" @bind:event="oninput" type="number" id="inverterModbusConnectDelaySeconds" name="inverterModbusConnectDelaySeconds">
            </p>
            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="inverterModbusTimeoutSeconds">Read Timeout (seconds):</label>
                <input class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@InverterTimeoutSeconds" @bind:event="oninput" type="number" id="inverterModbusTimeoutSeconds" name="inverterModbusTimeoutSeconds">
            </p>
        }
        else
        {
            if (_dtoBaseConfiguration.CurrentInverterPowerHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            for (var i = 0; i < _dtoBaseConfiguration.CurrentInverterPowerHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.CurrentInverterPowerHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateInverterHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.CurrentInverterPowerHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveInverterHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewInverterHeader()">Add new header</button></p>
        }
        <div class="form-group">
            <label for="currentInverterPowerJsonPattern">Inverter Power Json Pattern</label>
            <InputText id="currentInverterPowerJsonPattern" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlPattern">Grid Power XML Pattern</label>
            <InputText id="currentPowerToGridXmlPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeHeaderName">Inverter Power XML Attribute Header Name</label>
            <InputText id="currentInverterPowerXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeHeaderValue">Inverter Power XML Attribute Header Value</label>
            <InputText id="currentInverterPowerXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeValueName">Inverter Power XML Attribute Header Value</label>
            <InputText id="currentInverterPowerXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="updateIntervalSeconds">Car Power Adjustment Intervall (seconds)</label>
            <InputNumber id="updateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.UpdateIntervalSeconds" class="form-control" />
        </div>
        <div class="form-group">
            <label for="pvValueUpdateIntervalSeconds">Solar plant adjustment intervall (seconds)</label>
            <InputNumber id="pvValueUpdateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.PvValueUpdateIntervalSeconds" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOn">Time with enough solar power until charging starts (minutes)</label>
            <InputNumber id="minutesUntilSwitchOn" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOn" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOff">Time without enough solar power until charging stops (minutes)</label>
            <InputNumber id="minutesUntilSwitchOff" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOff" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateApiBaseUrl">Teslamate API Base Url</label>
            <InputText id="teslaMateApiBaseUrl" @bind-Value="_dtoBaseConfiguration.TeslaMateApiBaseUrl" placeholder="http://teslamateapi:8080" class="form-control" />
            <small id="teslaMateApiBaseUrlHelp" class="form-text text-muted">You can use the name of the container and the default port even though you changed the external port.</small>
        </div>
        <div class="form-group">
            <label for="geoFence">Relevant Geofence</label>
            <InputText id="geoFence" @bind-Value="_dtoBaseConfiguration.GeoFence" placeholder="Home" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You have to add a geofence with the same name in TeslaMate</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateDbServer">TeslaMate Database Server Name</label>
            <InputText id="teslaMateDbServer" @bind-Value="_dtoBaseConfiguration.TeslaMateDbServer" placeholder="database" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the name of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbPort">TeslaMate Database Server Port</label>
            <InputNumber id="teslaMateDbPort" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPort" placeholder="5432" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the internal port of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbUser">TeslaMate Database Username</label>
            <InputText id="teslaMateDbUser" @bind-Value="_dtoBaseConfiguration.TeslaMateDbUser" placeholder="username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="teslaMateDbPassword">TeslaMate Database Server Password</label>
            <InputText type="password" id="teslaMateDbPassword" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPassword" placeholder="secret" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Mosquito servername</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.MosquitoServer" placeholder="mosquitto" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Mqqt ClientId</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.MqqtClientId" placeholder="TeslaSolarCharger" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Telegram Bot Key</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.TelegramBotKey" placeholder="1234567890:ASDFuiauhwerlfvasedr" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Telegram Channel ID</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.TelegramChannelId" placeholder="-156480125" class="form-control" />
        </div>
        <hr />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private DtoBaseConfiguration? _dtoBaseConfiguration;

    private string? GridModbusUnitIdentifier
    {
        get => _gridModbusUnitIdentifier;
        set
        {
            _gridModbusUnitIdentifier = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridStartingAddress
    {
        get => _gridStartingAddress;
        set
        {
            _gridStartingAddress = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridQuantity
    {
        get => _gridQuantity;
        set
        {
            _gridQuantity = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridIpAddress
    {
        get => _gridIpAddress;
        set
        {
            _gridIpAddress = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridPort
    {
        get => _gridPort;
        set
        {
            _gridPort = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridConnectDelaySeconds
    {
        get => _gridConnectDelaySeconds;
        set
        {
            _gridConnectDelaySeconds = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? GridTimeoutSeconds
    {
        get => _gridTimeoutSeconds;
        set
        {
            _gridTimeoutSeconds = value;
            UpdateGridUrlFromModbusValues();
        }
    }

    private string? InverterModbusUnitIdentifier
    {
        get => _inverterModbusUnitIdentifier;
        set
        {
            _inverterModbusUnitIdentifier = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterStartingAddress
    {
        get => _inverterStartingAddress;
        set
        {
            _inverterStartingAddress = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterQuantity
    {
        get => _inverterQuantity;
        set
        {
            _inverterQuantity = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterIpAddress
    {
        get => _inverterIpAddress;
        set
        {
            _inverterIpAddress = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterPort
    {
        get => _inverterPort;
        set
        {
            _inverterPort = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterConnectDelaySeconds
    {
        get => _inverterConnectDelaySeconds;
        set
        {
            _inverterConnectDelaySeconds = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? InverterTimeoutSeconds
    {
        get => _inverterTimeoutSeconds;
        set
        {
            _inverterTimeoutSeconds = value;
            UpdateInverterUrlFromModbusValues();
        }
    }

    private string? _gridModbusUnitIdentifier;
    private string? _gridStartingAddress;
    private string? _gridQuantity;
    private string? _gridIpAddress;
    private string? _gridPort;
    private string? _gridConnectDelaySeconds;
    private string? _gridTimeoutSeconds;

    private string? _inverterModbusUnitIdentifier;
    private string? _inverterStartingAddress;
    private string? _inverterQuantity;
    private string? _inverterIpAddress;
    private string? _inverterPort;
    private string? _inverterConnectDelaySeconds;
    private string? _inverterTimeoutSeconds;

    protected override async Task OnInitializedAsync()
    {
        _dtoBaseConfiguration = await HttpClient.GetFromJsonAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration");
        if (_dtoBaseConfiguration != null && _dtoBaseConfiguration.IsModbusGridUrl)
        {
            if (string.IsNullOrWhiteSpace(_dtoBaseConfiguration.CurrentPowerToGridUrl))
            {
                _dtoBaseConfiguration.CurrentPowerToGridUrl = "http://modbusplugin/api/Modbus/GetInt32Value?unitIdentifier=3&startingAddress=&quantity=&ipAddress=&port=502&factor=1&connectDelaySeconds=1&timeoutSeconds=10";
            }
            var uri = new Uri(_dtoBaseConfiguration.CurrentPowerToGridUrl);
            GridModbusUnitIdentifier = HttpUtility.ParseQueryString(uri.Query).Get("unitIdentifier");
            GridStartingAddress = HttpUtility.ParseQueryString(uri.Query).Get("startingAddress");
            GridQuantity = HttpUtility.ParseQueryString(uri.Query).Get("quantity");
            GridIpAddress = HttpUtility.ParseQueryString(uri.Query).Get("ipAddress");
            GridPort = HttpUtility.ParseQueryString(uri.Query).Get("port");
            GridConnectDelaySeconds = HttpUtility.ParseQueryString(uri.Query).Get("connectDelaySeconds");
            GridTimeoutSeconds = HttpUtility.ParseQueryString(uri.Query).Get("timeoutSeconds");
        }

        if (_dtoBaseConfiguration != null && _dtoBaseConfiguration.IsModbusInverterUrl)
        {
            if (string.IsNullOrWhiteSpace(_dtoBaseConfiguration.CurrentInverterPowerUrl))
            {
                _dtoBaseConfiguration.CurrentInverterPowerUrl = "http://modbusplugin/api/Modbus/GetInt32Value?unitIdentifier=3&startingAddress=&quantity=&ipAddress=&port=502&factor=1&connectDelaySeconds=1&timeoutSeconds=10";
            }
            var uri = new Uri(_dtoBaseConfiguration.CurrentInverterPowerUrl);
            InverterModbusUnitIdentifier = HttpUtility.ParseQueryString(uri.Query).Get("unitIdentifier");
            InverterStartingAddress = HttpUtility.ParseQueryString(uri.Query).Get("startingAddress");
            InverterQuantity = HttpUtility.ParseQueryString(uri.Query).Get("quantity");
            InverterIpAddress = HttpUtility.ParseQueryString(uri.Query).Get("ipAddress");
            InverterPort = HttpUtility.ParseQueryString(uri.Query).Get("port");
            InverterConnectDelaySeconds = HttpUtility.ParseQueryString(uri.Query).Get("connectDelaySeconds");
            InverterTimeoutSeconds = HttpUtility.ParseQueryString(uri.Query).Get("timeoutSeconds");
        }
    }

    private void UpdateGridHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentPowerToGridHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewGridHeader()
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add($"{_dtoBaseConfiguration?.CurrentPowerToGridHeaders.Count + 1}", "");
    }

    private void RemoveGridHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(key);
    }

    private void UpdateGridUrlFromModbusValues()
    {
        if (_dtoBaseConfiguration != null)
        {
            _dtoBaseConfiguration.CurrentPowerToGridUrl = $"http://modbusplugin/api/Modbus/GetInt32Value?unitIdentifier={GridModbusUnitIdentifier}&startingAddress={GridStartingAddress}&quantity={GridQuantity}&ipAddress={GridIpAddress}&port={GridPort}&connectDelaySeconds={GridConnectDelaySeconds}&timeoutSeconds={GridTimeoutSeconds}";
        }
    }

    private void UpdateInverterHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentInverterPowerHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewInverterHeader()
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add($"{_dtoBaseConfiguration?.CurrentInverterPowerHeaders.Count + 1}", "");
    }

    private void RemoveInverterHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(key);
    }

    private void UpdateInverterUrlFromModbusValues()
    {
        if (_dtoBaseConfiguration != null)
        {
            _dtoBaseConfiguration.CurrentInverterPowerUrl = $"http://modbusplugin/api/Modbus/GetInt32Value?unitIdentifier={InverterModbusUnitIdentifier}&startingAddress={InverterStartingAddress}&quantity={InverterQuantity}&ipAddress={InverterIpAddress}&port={InverterPort}&connectDelaySeconds={InverterConnectDelaySeconds}&timeoutSeconds={InverterTimeoutSeconds}";
        }
    }

    private void UpdateHomeBatterySocHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatterySocHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatterySocHeader()
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add($"{_dtoBaseConfiguration?.HomeBatterySocHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatterySocHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(key);
    }

    private void UpdateHomeBatteryPowerHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatteryPowerHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatteryPowerHeader()
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add($"{_dtoBaseConfiguration?.HomeBatteryPowerHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatteryPowerHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(key);
    }

    private async Task HandleValidSubmit()
    {
        var result = await HttpClient.PutAsJsonAsync("api/BaseConfiguration/UpdateBaseConfiguration", _dtoBaseConfiguration);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Base Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating base configuration");
        }
    }
}
