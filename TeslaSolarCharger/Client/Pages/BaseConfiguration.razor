@page "/BaseConfiguration"
@using TeslaSolarCharger.Client.Components
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using System.Web
@inject HttpClient HttpClient
@inject IToastService ToastService

<PageTitle>Base Configuration</PageTitle>

<h3>Base Configuration</h3>

@if (_dtoBaseConfiguration == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_dtoBaseConfiguration" OnValidSubmit="@HandleValidSubmit">
        <hr />
        <div class="form-group">
            <label for="carPriorities">Car Ids</label>
            <InputText id="carPriorities" @bind-Value="_dtoBaseConfiguration.CarPriorities" placeholder="1|3|2" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Car Ids separated by '|'. Note: The order of the IDs is the order of power distribution.</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="currentPowerToGridUrl">Grid Power Url</label>
            <InputText id="currentPowerToGridUrl" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridCorrectionFactor">Correction Factor</label>
            <InputText id="currentPowerToGridCorrectionFactor" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridCorrectionFactorString" class="form-control" />
            <div>
                <small id="currentPowerToGridCorrectionFactorHelp" class="form-text text-muted">Use this if consuming 1 W from the grid is not the value 1. E.g. if sending 1500 Watt to the grid is returned as 1.5 you have to enter -1000 here</small>
            </div>
        </div>
        <div class="form-group">
            <label for="solarMqttServer">Solar Mqtt-Server</label>
            <InputText id="solarMqttServer" @bind-Value="_dtoBaseConfiguration.SolarMqttServer" class="form-control" />
            <div>
                <small id="solarMqttServer" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="solarMqttUserName">Solar Mqtt Username</label>
            <InputText id="solarMqttUserName" @bind-Value="_dtoBaseConfiguration.SolarMqttUserName" placeholder="username" class="form-control" />
            <div>
                <small id="solarMqttUserNameHelp" class="form-text text-muted">Leave this blank if your mqtt server does not need authentication</small>
            </div>
        </div>
        <div class="form-group">
            <label for="solarMqttPassword">Solar Mqtt Password</label>
            <InputText type="password" id="solarMqttPassword" @bind-Value="_dtoBaseConfiguration.SolarMqttPassword" placeholder="secret" class="form-control" />
            <div>
                <small id="solarMqttUserNameHelp" class="form-text text-muted">Leave this blank if your mqtt server does not need authentication</small>
            </div>
        </div>
        <div class="form-group">
            <label for="currentPowerToGridMqttTopic">Grid Power Mqtt-Topic</label>
            <InputText id="currentPowerToGridMqttTopic" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridMqttTopic" class="form-control" />
            <div>
                <small id="currentPowerToGridMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="powerBuffer">Power Buffer (Watt)</label>
            <InputNumber id="powerBuffer" @bind-Value="_dtoBaseConfiguration.PowerBuffer" class="form-control" />
            <small id="powerBufferHelp" class="form-text text-muted">Set values higher than 0 to e.g. charge your home battery first, or lower than minimum adjustable power to charge your car first (e.g. 230V * 1A * 3 phases => -691W).</small>
        </div>
        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusGridUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusGridUrl)
        {
            <ModbusUrlCreationComponent 
                @bind-ModbusUrl="_dtoBaseConfiguration.CurrentPowerToGridUrl"
                @bind-ModbusUrl:event="ModbusUrlChanged" />
        }
        else
        {
            if (_dtoBaseConfiguration.CurrentPowerToGridHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            for (var i = 0; i < _dtoBaseConfiguration.CurrentPowerToGridHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.CurrentPowerToGridHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateGridHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.CurrentPowerToGridHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveGridHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewGridHeader()">Add new header</button></p>
        }
        <div class="form-group">
            <label for="currentPowerToGridJsonPattern">Grid Power Json Pattern</label>
            <InputText id="currentPowerToGridJsonPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlPattern">Grid Power XML Pattern</label>
            <InputText id="currentPowerToGridXmlPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeHeaderName">Grid Power XML Attribute Header Name</label>
            <InputText id="currentPowerToGridXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeHeaderValue">Grid Power XML Attribute Header Value</label>
            <InputText id="currentPowerToGridXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlAttributeValueName">Grid Power XML Attribute Header Value</label>
            <InputText id="currentPowerToGridXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="homeBatteryMinSoc">Home Battery Minimum Soc (%)</label>
            <InputNumber id="homeBatteryMinSoc" @bind-Value="_dtoBaseConfiguration.HomeBatteryMinSoc" class="form-control" />
            <small id="homeBatteryMinSocHelp" class="form-text text-muted">Set the SoC your home battery should get charged to before cars start to use full power.</small>
        </div>
        <div class="form-group">
            <label for="homeBatteryChargingPower">Home Battery charging power (W)</label>
            <InputNumber id="homeBatteryChargingPower" @bind-Value="_dtoBaseConfiguration.HomeBatteryChargingPower" class="form-control" />
            <small id="homeBatteryChargingPowerHelp" class="form-text text-muted">Set the power your home battery should charge with as long as SoC is below set minimum SoC.</small>
        </div>
        <div class="form-group">
            <label for="homeBatterySocUrl">HomeBatterySoc Url</label>
            <InputText id="homeBatterySocUrl" @bind-Value="_dtoBaseConfiguration.HomeBatterySocUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocMqttTopic">HomeBatterySoc Mqtt-Topic</label>
            <InputText id="homeBatterySocMqttTopic" @bind-Value="_dtoBaseConfiguration.HomeBatterySocMqttTopic" class="form-control" />
            <div>
                <small id="homeBatterySocMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="homeBatterySocCorrectionFactor">Correction Factor</label>
            <InputText id="homeBatterySocCorrectionFactor" @bind-Value="_dtoBaseConfiguration.HomeBatterySocCorrectionFactorString" class="form-control" />
            <div>
                <small id="homeBatterySocCorrectionFactorHelp" class="form-text text-muted">Use this if 1% SoC is not the value 1. E.g. if at 1% SoC the homeBattery returns 0.01 enter 100</small>
            </div>
        </div>

        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusHomeBatterySocUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusHomeBatterySocUrl)
        {
            <ModbusUrlCreationComponent @bind-ModbusUrl="_dtoBaseConfiguration.HomeBatterySocUrl"
                                @bind-ModbusUrl:event="ModbusUrlChanged" />
        }
        else
        {
            @if (_dtoBaseConfiguration.HomeBatterySocHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            @for (var i = 0; i < _dtoBaseConfiguration.HomeBatterySocHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.HomeBatterySocHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
                           @onchange="@(e => UpdateHomeBatterySocHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
                           @onchange="@(e => _dtoBaseConfiguration.HomeBatterySocHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveHomeBatterySocHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewHomeBatterySocHeader()">Add new header</button></p>
        }
        <div class="form-group">
            <label for="homeBatterySocJsonPattern">Home Battery Soc Json Pattern</label>
            <InputText id="homeBatterySocJsonPattern" @bind-Value="_dtoBaseConfiguration.HomeBatterySocJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlPattern">Home Battery Soc XML Pattern</label>
            <InputText id="homeBatterySocXmlPattern" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeHeaderName">Home Battery Soc XML Attribute Header Name</label>
            <InputText id="homeBatterySocXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeHeaderValue">Home Battery Soc XML Attribute Header Value</label>
            <InputText id="homeBatterySocXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatterySocXmlAttributeValueName">Home Battery Soc XML Attribute Header Value</label>
            <InputText id="homeBatterySocXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.HomeBatterySocXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="homeBatteryPowerUrl">HomeBatteryPower Url</label>
            <InputText id="homeBatteryPowerUrl" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerMqttTopic">HomeBatteryPower Mqtt-Topic</label>
            <InputText id="homeBatteryPowerMqttTopic" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerMqttTopic" class="form-control" />
            <div>
                <small id="homeBatteryPowerMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerCorrectionFactor">Correction Factor</label>
            <InputText id="homeBatteryPowerCorrectionFactor" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerCorrectionFactorString" class="form-control" />
            <div>
                <small id="homeBatteryPowerCorrectionFactorHelp" class="form-text text-muted">Use this if consuming 1 W from your home batter is not the value -1. E.g. if charging 1500 Watt to your home battery is returned as 1.5 you have to enter 1000 here</small>
            </div>
        </div>
        
        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusHomeBatteryPowerUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusHomeBatteryPowerUrl)
        {
            <ModbusUrlCreationComponent @bind-ModbusUrl="_dtoBaseConfiguration.HomeBatteryPowerUrl"
                                        @bind-ModbusUrl:event="ModbusUrlChanged" />
        }
        else
        {
            @if (_dtoBaseConfiguration.HomeBatteryPowerHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            @for (var i = 0; i < _dtoBaseConfiguration.HomeBatteryPowerHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.HomeBatteryPowerHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
                           @onchange="@(e => UpdateHomeBatteryPowerHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
                           @onchange="@(e => _dtoBaseConfiguration.HomeBatteryPowerHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveHomeBatteryPowerHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewHomeBatteryPowerHeader()">Add new header</button></p>
        }

        <div class="form-group">
            <label for="homeBatteryPowerJsonPattern">Home Battery Power Json Pattern</label>
            <InputText id="homeBatteryPowerJsonPattern" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlPattern">Home Battery Power XML Pattern</label>
            <InputText id="homeBatteryPowerXmlPattern" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeHeaderName">Home Battery Power XML Attribute Header Name</label>
            <InputText id="homeBatteryPowerXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeHeaderValue">Home Battery Power XML Attribute Header Value</label>
            <InputText id="homeBatteryPowerXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerXmlAttributeValueName">Home Battery Power XML Attribute Header Value</label>
            <InputText id="homeBatteryPowerXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="homeBatteryPowerInversionUrl">HomeBatteryPowerInversion Url</label>
            <InputText id="homeBatteryPowerInversionUrl" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerInversionUrl" class="form-control" />
            <div>
                <small id="homeBatteryPowerInversionUrlHelp" class="form-text text-muted">Use this if you have to dynamically invert the home battery power. Note: Only 0 and 1 are allowed as response.</small>
            </div>
        </div>

        <hr />
        <div class="form-group">
            <label for="currentInverterPowerUrl">Inverter Power Url</label>
            <InputText id="currentInverterPowerUrl" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerUrl" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerMqttTopic">Inverter Power Mqtt-Topic</label>
            <InputText id="currentInverterPowerMqttTopic" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerMqttTopic" class="form-control" />
            <div>
                <small id="currentInverterPowerMqttTopic" class="form-text text-muted">This is only needed if you get solar values via MQTT</small>
            </div>
        </div>
        <div class="form-group">
            <label for="currentInverterPowerCorrectionFactor">Correction Factor</label>
            <InputText id="currentInverterPowerCorrectionFactor" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerCorrectionFactorString" class="form-control" />
            <div>
                <small id="currentInverterPowerCorrectionFactorHelp" class="form-text text-muted">Factor to multiply the result value with. E.g. if your inverter returns kW instead of W enter 1000.</small>
            </div>
        </div>
        <div class="form-group">
            <InputCheckbox id="IsModbusGridUrl" @bind-Value="_dtoBaseConfiguration.IsModbusInverterUrl" class="form-check-input" />
            <label for="IsModbusGridUrl">Use Modbus Url Creation Tool</label>
            <div>
                <small id="IsModbusGridUrlHelp" class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
            </div>
        </div>
        @if (_dtoBaseConfiguration.IsModbusInverterUrl)
        {
            <ModbusUrlCreationComponent @bind-ModbusUrl="_dtoBaseConfiguration.CurrentInverterPowerUrl"
                                @bind-ModbusUrl:event="ModbusUrlChanged" />
        }
        else
        {
            if (_dtoBaseConfiguration.CurrentInverterPowerHeaders.Count > 0)
            {
                <label class="col-5 col-sm-4 col-md-3 col-lg-2">Key:</label>
                <label class="col-6 col-sm-6 col-md-3 col-lg-2">Value:</label>
            }
            for (var i = 0; i < _dtoBaseConfiguration.CurrentInverterPowerHeaders.Count; i++)
            {
                var header = _dtoBaseConfiguration.CurrentInverterPowerHeaders.ElementAt(i);
                <p>
                    <input class="col-5 col-sm-4 col-md-3 col-lg-2" value="@header.Key" type="text" id="headerKey" name="headerKey"
               @onchange="@(e => UpdateInverterHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))">
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@header.Value" type="text" id="headerValue" name="headerValue"
               @onchange="@(e => _dtoBaseConfiguration.CurrentInverterPowerHeaders[header.Key] = e.Value?.ToString() ?? string.Empty)">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveInverterHeader(header.Key)">DEL</button>
                </p>
            }
            <p><button type="button" class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => AddNewInverterHeader()">Add new header</button></p>
        }
        <div class="form-group">
            <label for="currentInverterPowerJsonPattern">Inverter Power Json Pattern</label>
            <InputText id="currentInverterPowerJsonPattern" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerJsonPattern" placeholder="$.data.overage" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentPowerToGridXmlPattern">Grid Power XML Pattern</label>
            <InputText id="currentPowerToGridXmlPattern" @bind-Value="_dtoBaseConfiguration.CurrentPowerToGridXmlPattern" placeholder="Device/Measurements/Measurement" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeHeaderName">Inverter Power XML Attribute Header Name</label>
            <InputText id="currentInverterPowerXmlAttributeHeaderName" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderName" placeholder="AttributeHeaderName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeHeaderValue">Inverter Power XML Attribute Header Value</label>
            <InputText id="currentInverterPowerXmlAttributeHeaderValue" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeHeaderValue" placeholder="AttributeHeaderValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="currentInverterPowerXmlAttributeValueName">Inverter Power XML Attribute Header Value</label>
            <InputText id="currentInverterPowerXmlAttributeValueName" @bind-Value="_dtoBaseConfiguration.CurrentInverterPowerXmlAttributeValueName" placeholder="AttributeValueName" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="updateIntervalSeconds">Car Power Adjustment Intervall (seconds)</label>
            <InputNumber id="updateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.UpdateIntervalSeconds" class="form-control" />
            <div>
                <small id="updateIntervalSecondsHelp" class="form-text text-muted">Note: It is not possible to use values below 25 seconds here, as there is a delay between the car changing its current and the Tesla API getting notified about this change.</small>
            </div>
        </div>
        <div class="form-group">
            <label for="pvValueUpdateIntervalSeconds">Solar plant adjustment intervall (seconds)</label>
            <InputNumber id="pvValueUpdateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.PvValueUpdateIntervalSeconds" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOn">Time with enough solar power until charging starts (minutes)</label>
            <InputNumber id="minutesUntilSwitchOn" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOn" class="form-control" />
        </div>
        <div class="form-group">
            <label for="minutesUntilSwitchOff">Time without enough solar power until charging stops (minutes)</label>
            <InputNumber id="minutesUntilSwitchOff" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOff" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateApiBaseUrl">Teslamate API Base Url</label>
            <InputText id="teslaMateApiBaseUrl" @bind-Value="_dtoBaseConfiguration.TeslaMateApiBaseUrl" placeholder="http://teslamateapi:8080" class="form-control" />
            <small id="teslaMateApiBaseUrlHelp" class="form-text text-muted">You can use the name of the container and the default port even though you changed the external port.</small>
        </div>
        <div class="form-group">
            <label for="geoFence">Relevant Geofence</label>
            <InputText id="geoFence" @bind-Value="_dtoBaseConfiguration.GeoFence" placeholder="Home" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You have to add a geofence with the same name in TeslaMate</small>
        </div>
        <hr />
        <div class="form-group">
            <label for="teslaMateDbServer">TeslaMate Database Server Name</label>
            <InputText id="teslaMateDbServer" @bind-Value="_dtoBaseConfiguration.TeslaMateDbServer" placeholder="database" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the name of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbPort">TeslaMate Database Server Port</label>
            <InputNumber id="teslaMateDbPort" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPort" placeholder="5432" class="form-control" />
            <small id="geoFenceHelp" class="form-text text-muted">You can use the internal port of the TeslaMate database container</small>
        </div>
        <div class="form-group">
            <label for="teslaMateDbUser">TeslaMate Database Username</label>
            <InputText id="teslaMateDbUser" @bind-Value="_dtoBaseConfiguration.TeslaMateDbUser" placeholder="username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="teslaMateDbPassword">TeslaMate Database Server Password</label>
            <InputText type="password" id="teslaMateDbPassword" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPassword" placeholder="secret" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Mosquito servername</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.MosquitoServer" placeholder="mosquitto" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Mqqt ClientId</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.MqqtClientId" placeholder="TeslaSolarCharger" class="form-control" />
        </div>
        <hr />
        <div class="form-group">
            <label for="mosquitoServer">Telegram Bot Key</label>
            <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.TelegramBotKey" placeholder="1234567890:ASDFuiauhwerlfvasedr" class="form-control" />
        </div>
        <div class="form-group">
            <label for="mqqtClientId">Telegram Channel ID</label>
            <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.TelegramChannelId" placeholder="-156480125" class="form-control" />
        </div>
        <hr />
        <DataAnnotationsValidator />
        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private DtoBaseConfiguration? _dtoBaseConfiguration;

    protected override async Task OnInitializedAsync()
    {
        _dtoBaseConfiguration = await HttpClient.GetFromJsonAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration").ConfigureAwait(false);
    }

    private void UpdateGridHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentPowerToGridHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewGridHeader()
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Add($"{_dtoBaseConfiguration?.CurrentPowerToGridHeaders.Count + 1}", "");
    }

    private void RemoveGridHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentPowerToGridHeaders.Remove(key);
    }

    private void UpdateInverterHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.CurrentInverterPowerHeaders[oldKey];
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewInverterHeader()
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Add($"{_dtoBaseConfiguration?.CurrentInverterPowerHeaders.Count + 1}", "");
    }

    private void RemoveInverterHeader(string key)
    {
        _dtoBaseConfiguration?.CurrentInverterPowerHeaders.Remove(key);
    }

    private void UpdateHomeBatterySocHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatterySocHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatterySocHeader()
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Add($"{_dtoBaseConfiguration?.HomeBatterySocHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatterySocHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatterySocHeaders.Remove(key);
    }

    private void UpdateHomeBatteryPowerHeaderKey(string oldKey, string newKey)
    {
        var value = _dtoBaseConfiguration?.HomeBatteryPowerHeaders[oldKey];
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(oldKey);
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add(newKey, value ?? string.Empty);
    }

    private void AddNewHomeBatteryPowerHeader()
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Add($"{_dtoBaseConfiguration?.HomeBatteryPowerHeaders.Count + 1}", "");
    }

    private void RemoveHomeBatteryPowerHeader(string key)
    {
        _dtoBaseConfiguration?.HomeBatteryPowerHeaders.Remove(key);
    }

    private async Task HandleValidSubmit()
    {
        var result = await HttpClient.PutAsJsonAsync("api/BaseConfiguration/UpdateBaseConfiguration", _dtoBaseConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Base Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating base configuration");
        }
    }
}
