@page "/CarSettings"
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Client.Wrapper
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<PageTitle>Car Settings</PageTitle>
<h1>Car Settings</h1>

@if (_carBasicConfigurations == null)
{
    <div class="spinner"></div>
}
else
{
    @foreach (var carBasicConfiguration in _carBasicConfigurations)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <EditFormComponent T="CarBasicConfiguration" WrappedElement="@(new EditableItem<CarBasicConfiguration>(carBasicConfiguration))" OnValidSubmit="_ => UpdateCarConfiguration(carBasicConfiguration.Id, carBasicConfiguration)">
                <GenericInput For="() => carBasicConfiguration.Name" />
                <GenericInput For="() => carBasicConfiguration.Vin" />
                <GenericInput For="() => carBasicConfiguration.MinimumAmpere"/>
                <GenericInput For="() => carBasicConfiguration.MaximumAmpere" />
                <GenericInput For="() => carBasicConfiguration.UsableEnergy" />
                <GenericInput For="() => carBasicConfiguration.ChargingPriority" />
                <GenericInput For="() => carBasicConfiguration.ShouldBeManaged" />
                <GenericInput For="() => carBasicConfiguration.ShouldSetChargeStartTimes" />
                <GenericInput For="() => carBasicConfiguration.UseBle" />
            </EditFormComponent>
            <div>
                Note: Before TSC can update charge speed via BLE you must pair the car with TSC.
            </div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="_ => PairCar(carBasicConfiguration.Vin)">Ble Pair</MudButton>
            <div>
                @if (_pairingResults.ContainsKey(carBasicConfiguration.Vin))
                {
                    @_pairingResults[carBasicConfiguration.Vin]
                }
            </div>
        </div>
    }
}

@code {
    private List<CarBasicConfiguration>? _carBasicConfigurations;
    private readonly List<int> _savingCarIds = new();

    private Dictionary<string, string> _pairingResults = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        _carBasicConfigurations = await HttpClient.GetFromJsonAsync<List<CarBasicConfiguration>>("/api/Config/GetCarBasicConfigurations").ConfigureAwait(false);
    }

    private async Task UpdateCarConfiguration(int carId, CarBasicConfiguration carBasicConfiguration)
    {
        _savingCarIds.Add(carId);
        var result = await HttpClient.PutAsJsonAsync($"api/Config/UpdateCarBasicConfiguration?carId={carId}", carBasicConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Car Configuration updated", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error updating car configuration", Severity.Error);
        }
        _savingCarIds.RemoveAll(i => i == carId);
    }

    private async Task PairCar(string vin)
    {
        var result = await HttpClient.GetStringAsync($"/api/Ble/PairKey?vin={vin}").ConfigureAwait(false);
        _pairingResults[vin] = result;
    }

}