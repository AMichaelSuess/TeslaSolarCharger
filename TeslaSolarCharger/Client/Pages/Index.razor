@page "/"
@using System.Globalization
@using System.Timers
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.CarValues
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Resources
@using Majorsoft.Blazor.Components.Collapse
@using TeslaSolarCharger.Shared.Dtos.Settings
@using TeslaSolarCharger.Shared.Dtos.Table
@using System.Diagnostics
@inject HttpClient HttpClient
@inject IToastService ToastService
@inject ToolTipTextKeys ToolTipTextKeys

<PageTitle>Tesla Solar Charger</PageTitle>

<BackendIssueValidation></BackendIssueValidation>

@if (_pvValues != null)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_couldNotRefreshStates == true)
        {
            <small class="form-text text-muted">States could not be refreshed. Are you currently offline?</small>
        }
        @if (_isSolarEdgeInstallation == true)
        {
            <small class="form-text text-muted">As you are using SolarEdge which is rate limited, these values might be delayed or grid power and batterypower might be displayed as zero or your configured Home Battery charging power (W). This is nothing to worry about, it is just a way to handle the rate limitation.</small>
        }
        @if (_pvValues.InverterPower != null)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.InverterPower]">
                    <i class="fa-solid fa-solar-panel" style="width: 25px;"></i>@_pvValues.InverterPower W
                </TooltipComponent>
            </div>
            if (_pvValues.InverterPower < 0)
            {
                <small class="form-text text-muted">The inverter power is lower than 0. TSC always uses -1 for such values. To get the actual value coming from the inverter, check the TSC logs.</small>
            }
        }
        @if (_pvValues.GridPower != null)
        {
            <div class="@(_pvValues.GridPower > 0 ? "text-success" : "text-danger")">
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.GridPower]">
                    <i class="fa-solid fa-bolt" style="width: 25px;"></i>
                    @Math.Abs((int)_pvValues.GridPower) W
                </TooltipComponent>
            </div>
        }

        @if (_pvValues.HomeBatterySoc != null)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatterySoC]">
                    <i class="fa-solid fa-battery-full" style="width: 25px;"></i>@_pvValues.HomeBatterySoc %
                </TooltipComponent>
            </div>
        }
        @if (_pvValues.HomeBatteryPower != null)
        {
            <div class="@(_pvValues.HomeBatteryPower < 0 ? "text-danger" : "text-success")">
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatteryPower]">
                    <i class="fa-solid fa-battery-full" style="width: 25px;"></i>
                    @if (_pvValues.HomeBatteryPower != null)
                    {
                        @Math.Abs((int)_pvValues.HomeBatteryPower)
                    }
                    W
                </TooltipComponent>
            </div>
        }
        @if (_pvValues.PowerBuffer != null)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.PowerBuffer]">
                    <i class="fa-brands fa-buffer" style="width: 25px;"></i>@_pvValues.PowerBuffer W
                </TooltipComponent>
            </div>
        }
        <div>
            <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CombinedChargingPower]">
                <i class="fa-solid fa-car" style="width: 25px;"></i>@_pvValues.CarCombinedChargingPowerAtHome W
            </TooltipComponent>
        </div>
    </div>
}

@if (_carBaseStates == null || _carBaseSettings == null)
{
    <div class="spinner"></div>
}
else
{
    @if (_carBaseStates.Count < 1)
    {
        <p>
            You need to enable TeslaSolarCharger for at least one car in the <a href="/CarSettings">car settings page</a>.
        </p>
    }
    @foreach (var car in _carBaseStates)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div class="mb-3">
                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarName]">
                        <b>@(car.NameOrVin)</b>
                    </TooltipComponent>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargingPowerHome]">@car.HomeChargePower W</TooltipComponent>
                </div>
                <div>
                    @if (car.IsHealthy == false)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarNotHealthy]">
                            <i class="fa-solid fa-circle-exclamation"></i>
                        </TooltipComponent>
                    }
                    @if (car.IsHome)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarAtHome]">
                            <i class="fa-solid fa-house"></i>
                        </TooltipComponent>
                    }
                    @if (car.PluggedIn)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarPluggedIn]">
                            <i class="fa-solid fa-plug"></i>
                        </TooltipComponent>
                    }

                </div>
                <div>
                    <i class="fa-solid fa-battery-full" style="width: 25px;"></i><TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSoc]">@(car.StateOfCharge)%</TooltipComponent> <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSocLimit]">(@(car.StateOfChargeLimit) %)</TooltipComponent>
                </div>
                <div>
                </div>

                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedSolarEnergy]">
                        <i class="fa-solid fa-solar-panel" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedSolarEnergy.ToString("0.00") kWh (@car.DtoChargeSummary.SolarPortionPercent.ToString("0.0") %)
                    </TooltipComponent>
                </div>
                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedGridEnergy]">
                        <i class="fa-solid fa-bolt" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedGridEnergy.ToString("0.00") kWh (@((100 - car.DtoChargeSummary.SolarPortionPercent).ToString("0.0")) %)
                    </TooltipComponent>
                </div>
                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargeCost]">
                        <a href="HandledCharges/@car.CarId"><i class="fa-solid fa-coins" style="width: 25px;"></i> @car.DtoChargeSummary.ChargeCost.ToString("0.00") (@(car.DtoChargeSummary.AverageEnergyPrice.ToString("0.000")) per kWh)</a>
                    </TooltipComponent>
                </div>
            </div>
            <div>
                <InputComponent ValueId="@($"car{car.CarId}ChargeMode")"
                                LabelText="ChargeMode"
                                UnitText=""
                                HelpText="">
                    <InputFragment>
                        <InputSelect class="form-select" @bind-Value="@_carBaseSettings[car.CarId].ChargeMode" id="@($"car{car.CarId}ChargeMode")">
                            @foreach (var value in Enum.GetValues<ChargeMode>())
                            {
                                <option value="@value">@value.ToFriendlyString()</option>
                            }
                        </InputSelect>
                    </InputFragment>
                </InputComponent>

            </div>

            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvAndMinSoc or ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <InputComponent ValueId="@($"car{car.CarId}MinSoc")"
                                LabelText="Min SOC"
                                UnitText="%"
                                HelpText="">
                    <InputFragment>
                        <InputNumber id="maxCombinedCurrent" @bind-Value="_carBaseSettings[car.CarId].MinimumStateOfCharge" class="form-control" min="0" max="100" placeholder=" "/>
                    </InputFragment>
                </InputComponent>
            }
            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <div class="mb-3 form-check">
                    <input class="form-check-input" type="checkbox" @bind="_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate" id="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")">
                    <label class="form-check-label" for="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")">
                        Charge every day
                    </label>
                </div>
                @if (!_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate)
                {
                    <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                                    LabelText="Date"
                                    UnitText=""
                                    HelpText="">
                        <InputFragment>
                            <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.ToString("yyyy-MM-dd")" type="date" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                                   @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Hour).AddMinutes(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Minute))">
                        </InputFragment>
                    </InputComponent>
                }
                <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                                LabelText="Time"
                                UnitText=""
                                HelpText="">
                    <InputFragment>
                        <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.ToString("HH:mm")" type="time" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                    </InputFragment>
                </InputComponent>

            }
            @if (car.ChargingNotPlannedDueToNoSpotPricesAvailable)
            {
                <p>Note: Spot prices are published for the next day at 14:00 - 15:00. Charges won't be planned until @_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddDays(-1).AddHours(15).ToString(CultureInfo.CurrentCulture)</p>
            }

            <div class="d-grid gap-2 mb-3">
                <button class="btn btn-primary" type="button" @onclick="() => UpdateCarSettings(_carBaseSettings[car.CarId])">
                    @if (_savingCarIds.Any(i => i == car.CarId))
                    {
                        <span>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>
            

            @if (car.ChargeInformation.Count > 0)
            {
                <p>
                    Car will @(car.State == CarStateEnum.Charging ? "stop" : "start") charging when following conditions are met:<br/>
                    <ul>
                        @foreach (var chargeInfo in car.ChargeInformation)
                        {
                            @*Add one minute so displayed time is the latest time when switched.*@
                            <li>
                                @(string.Format(chargeInfo.InfoText, chargeInfo.TimeToDisplay?.ToLocalTime().DateTime.AddMinutes(1).ToString("g")))
                            </li>
                        }
                    </ul>
                </p>
            }

            @if (car.ChargingSlots is { Count: > 0 })
            {
                <p>
                    <b>Planned Charging Slots:</b>
                    <TableComponent Content="GeneratePlannedChargingSlotsTableContent(car.ChargingSlots)"></TableComponent>
                </p>

            }

            <CollapsePanel CollapsedColor="@_collapsedColor"
                           ExpandedColor="@_expandedColor"
                           HoverColor="@_hoverColor"
                           Disabled="@_isCollapseDisabled"
                           Collapsed="@_collapsedCarDetails.Any(h => h == car.CarId)"
                           ContentHeight="@_height"
                           Animate="@_isAnimated"
                           ShowContentOverflow="@_showOverflow"
                           OnCollapseChanged="(state) => OnCollapseChanged(state, car.CarId)">
                <CollapsedHeaderContent>
                    <div class="w-100">
                        <b>More car details:</b>
                        <span class="fa fa-lg fa-chevron-circle-down" aria-hidden="true"></span>
                    </div>
                </CollapsedHeaderContent>
                <ExpandedHeaderContent>
                    <div class="w-100">
                        <b>Collapse</b>
                        <span class="fa fa-lg fa-chevron-circle-up" aria-hidden="true"></span>
                    </div>
                </ExpandedHeaderContent>
                <Content>
                    @if (_newCarDetailStates.Any(c => c.Key == car.CarId))
                    {
                        <TableComponent
                            Content="@_newCarDetailStates[car.CarId]"></TableComponent>
                    }
                </Content>
            </CollapsePanel>
        </div>
    }
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_serverTimeZoneDisplayName != default)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.ServerTimeZone]">
                    Server Timezone: @_serverTimeZoneDisplayName
                </TooltipComponent>
            </div>
        }
        @if (_serverTime != default)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.ServerTime]">
                    Current Server Time: @_serverTime?.ToString()
                </TooltipComponent>
            </div>
        }
        @if (string.IsNullOrWhiteSpace(_version))
        {
            <p><em>Could not load version</em></p>
        }
        else
        {
            <p><em>Version: <a href="https://github.com/pkuehnel/TeslaSolarCharger/releases/tag/v@_version" target="_blank">@_version</a></em></p>
        }
    </div>


    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ" />
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1" />
        </div>
    </form>
}



@code {
    private DtoPvValues? _pvValues;
    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;
    private List<DtoCarBaseStates>? _carBaseStates;
    private Dictionary<int, DtoTableContent> _newCarDetailStates = new();
    private Dictionary<int, DtoCarBaseSettings>? _carBaseSettings;
    private Dictionary<string, string>? _toolTipTexts;
    private readonly List<int> _savingCarIds = new();
    private string _version = "";
    private HashSet<int> _collapsedCarDetails = new HashSet<int>();
    private string _collapsedColor = "LightGray";
    private string _expandedColor = "LightGray";
    private string _hoverColor = "LightGray";
    private bool _isAnimated = true;
    private bool _isCollapseDisabled = false;
    private bool _showOverflow = false;
    private int _height = 0;
    private DateTime? _serverTime;
    private string? _serverTimeZoneDisplayName;

    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        _toolTipTexts = await HttpClient.GetFromJsonAsync<Dictionary<string, string>>("api/Index/GetToolTipTexts").ConfigureAwait(false);
        await RefreshCarBaseSettings().ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        await RefreshPvValues().ConfigureAwait(false);
        await RefreshServerTime().ConfigureAwait(false);
        await RefreshServerTimeZone().ConfigureAwait(false);
        var dtoSolarChargerInstallation = await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/Hello/IsSolarEdgeInstallation").ConfigureAwait(false);
        _isSolarEdgeInstallation = dtoSolarChargerInstallation?.Value;
        _version = await HttpClient.GetStringAsync("api/Hello/ProductVersion").ConfigureAwait(false);
        foreach (var carBaseState in _carBaseStates!)
        {
            _collapsedCarDetails.Add(carBaseState.CarId);
        }

        _timer = new Timer();
        _timer.Interval = Debugger.IsAttached ? 60000 : 5000;
        _timer.Elapsed += async (_, _) => await RefreshStates().ConfigureAwait(false);
        _timer.Start();
    }

    private async Task RefreshCarBaseStates()
    {
        _carBaseStates = await HttpClient.GetFromJsonAsync<List<DtoCarBaseStates>>("api/Index/GetCarBaseStatesOfEnabledCars").ConfigureAwait(false);
    }

    private async Task RefreshCarBaseSettings()
    {
        _carBaseSettings = await HttpClient
            .GetFromJsonAsync<Dictionary<int, DtoCarBaseSettings>>("api/Index/GetCarBaseSettingsOfEnabledCars")
            .ConfigureAwait(false);
    }

    private async Task RefreshPvValues()
    {
        _pvValues = await HttpClient.GetFromJsonAsync<DtoPvValues>("api/Index/GetPvValues").ConfigureAwait(false);
    }

    private async Task UpdateCarSettings(DtoCarBaseSettings dtoCarBaseSettings)
    {
        _savingCarIds.Add(dtoCarBaseSettings.CarId);
        var result = await HttpClient.PostAsJsonAsync("/api/Index/UpdateCarBaseSettings", dtoCarBaseSettings).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Car Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating car configuration");
        }
        await RefreshCarBaseSettings().ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        _savingCarIds.RemoveAll(i => i == dtoCarBaseSettings.CarId);
        StateHasChanged();
    }

    private async Task RefreshAllVisableCarDetails()
    {
        if (_carBaseStates == null)
        {
            return;
        }
        var uncollapsedCarIds = new HashSet<int>();
        foreach (var carId in _carBaseStates.Select(s => s.CarId))
        {
            if (!_collapsedCarDetails.Any(c => c == carId))
            {
                uncollapsedCarIds.Add(carId);
            }
        }
        foreach (var carId in uncollapsedCarIds)
        {
            var dtoCarTopicValues = await HttpClient.GetFromJsonAsync<DtoCarTopicValues>($"api/Index/CarDetails?carId={carId}").ConfigureAwait(false);
            if (dtoCarTopicValues == default)
            {
                continue;
            }

            var dataRows = new List<DtoTableRow>();
            foreach (var dateValue in dtoCarTopicValues.DateValues)
            {
                dataRows.Add(new DtoTableRow()
                {
                    Elements = new List<string?>()
                    {
                        dateValue.Topic,
                        dateValue.DateTime?.ToString("g"),
                    },
                });
            }

            foreach (var nonDateValue in dtoCarTopicValues.NonDateValues)
            {
                dataRows.Add(new DtoTableRow()
                {
                    Elements = new List<string?>()
                    {
                        nonDateValue.Topic,
                        nonDateValue.Value,
                    },
                });
            }
            var tableContent = new DtoTableContent()
            {
                TableHeader = new DtoTableRow()
                {
                    Elements = new List<string?>()
                    {
                        "Topic",
                        "Value",
                    },
                },
                TableData = dataRows,
            };
            _newCarDetailStates[carId] = tableContent;
        }

    }

    private async Task RefreshServerTime()
    {
        var dtoTimeValue = await HttpClient.GetFromJsonAsync<DateTime>("api/Hello/GetServerLocalTime").ConfigureAwait(false);
        _serverTime = dtoTimeValue;
    }

    private async Task RefreshServerTimeZone()
    {
        var dtoServerTimeZoneId = await HttpClient.GetFromJsonAsync<DtoValue<string>>("api/Hello/GetServerTimeZoneDisplayName").ConfigureAwait(false);
        _serverTimeZoneDisplayName = dtoServerTimeZoneId?.Value;
    }

    private async Task OnCollapseChanged(bool changedToCollapse, int carId)
    {
        if (changedToCollapse)
        {
            _collapsedCarDetails.Add(carId);
        }
        else
        {
            _collapsedCarDetails.Remove(carId);
            _newCarDetailStates.Remove(carId);
        }
        await RefreshAllVisableCarDetails().ConfigureAwait(false);
    }

    private DtoTableContent GeneratePlannedChargingSlotsTableContent(List<DtoChargingSlot> chargingSlots)
    {
        var table = new DtoTableContent()
            {
                TableHeader = new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    "Start",
                    "End",
                    "Duration",
                },
                },
                TableData = new List<DtoTableRow>(),
            };
        foreach (var chargingSlot in chargingSlots)
        {
            table.TableData.Add(new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    chargingSlot.ChargeStart.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeEnd.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeDuration < TimeSpan.FromDays(1) ? chargingSlot.ChargeDuration.ToString(@"hh\:mm") : string.Empty,
                },
                    IsActive = chargingSlot.IsActive,
                });
        }

        return table;
    }

    private async Task RefreshStates()
    {
        try
        {
            await RefreshPvValues().ConfigureAwait(false);
            await RefreshCarBaseStates().ConfigureAwait(false);
            await RefreshAllVisableCarDetails().ConfigureAwait(false);
            await RefreshServerTime().ConfigureAwait(false);
            _couldNotRefreshStates = false;
        }
        catch (Exception)
        {
            _couldNotRefreshStates = true;
        }
        StateHasChanged();
    }
}