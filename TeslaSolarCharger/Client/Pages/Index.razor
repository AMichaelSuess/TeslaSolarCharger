@page "/"
@using System.Globalization
@using System.Timers
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.CarValues
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Client.Components
@using TeslaSolarCharger.Shared.Resources
@using Majorsoft.Blazor.Components.Collapse
@inject HttpClient HttpClient
@inject IToastService ToastService
@inject ToolTipTextKeys ToolTipTextKeys

<PageTitle>Tesla Solar Charger</PageTitle>

<BackendIssueValidation></BackendIssueValidation>

@if (_pvValues != null)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_couldNotRefreshStates == true)
        {
            <small class="form-text text-muted">States could not be refreshed. Are you currently offline?</small>
        }
        @if (_isSolarEdgeInstallation == true)
        {
            <small class="form-text text-muted">As you are using SolarEdge which is rate limited, these values might be delayed or grid power and batterypower might be displayed as zero or your configured Home Battery charging power (W). This is nothing to worry about, it is just a way to handle the rate limitation.</small>
        }
        @if (_pvValues.InverterPower != null)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.InverterPower]">
                    <i class="fa-solid fa-solar-panel" style="width: 25px;"></i>@_pvValues.InverterPower W
                </TooltipComponent>
            </div>
        }
        <div class="@(_pvValues.GridPower > 0 ? "text-success" : "text-danger")">
            <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.GridPower]">
                <i class="fa-solid fa-bolt" style="width: 25px;"></i>
                @if (_pvValues.GridPower != null)
                {
                    @Math.Abs((int)_pvValues.GridPower)
                }
                W
            </TooltipComponent>
        </div>
        @if (_pvValues.HomeBatterySoc != null)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatterySoC]">
                    <i class="fa-solid fa-battery-full" style="width: 25px;"></i>@_pvValues.HomeBatterySoc %
                </TooltipComponent>
            </div>
        }
        @if (_pvValues.HomeBatteryPower != null)
        {
            <div class="@(_pvValues.HomeBatteryPower < 0 ? "text-danger" : "text-success")">
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatteryPower]">
                    <i class="fa-solid fa-battery-full" style="width: 25px;"></i>
                    @if (_pvValues.HomeBatteryPower != null)
                    {
                        @Math.Abs((int)_pvValues.HomeBatteryPower)
                    }
                    W
                </TooltipComponent>
            </div>
        }
        <div>
            <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CombinedChargingPower]">
                <i class="fa-solid fa-car" style="width: 25px;"></i>@_pvValues.CarCombinedChargingPowerAtHome W
            </TooltipComponent>
        </div>
    </div>
}

@if (_carBaseStates == null || _carBaseSettings == null)
{
    <div class="spinner"></div>
}
else
{
    @if (_carBaseStates.Count < 1)
    {
        <p>
            You need to enable TeslaSolarCharger for at least one car in the <a href="/CarSettings">car settings page</a>.
        </p>
    }
    @foreach (var car in _carBaseStates)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarName]">
                    <b>@(car.NameOrVin)</b>
                </TooltipComponent>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargingPowerHome]">@car.HomeChargePower W</TooltipComponent>
            </div>
            <div>
                @if (car.IsHealthy == false)
                {
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarNotHealthy]">
                        <i class="fa-solid fa-circle-exclamation"></i>
                    </TooltipComponent>
                }
                @if (car.IsHome)
                {
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarAtHome]">
                        <i class="fa-solid fa-house"></i>
                    </TooltipComponent>
                }
                @if (car.PluggedIn)
                {
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarPluggedIn]">
                        <i class="fa-solid fa-plug"></i>
                    </TooltipComponent>
                }

            </div>
            <div>
                <i class="fa-solid fa-battery-full" style="width: 25px;"></i><TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSoc]">@(car.StateOfCharge)%</TooltipComponent> <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSocLimit]">(@(car.StateOfChargeLimit)% )</TooltipComponent>
            </div>
            <div>
            </div>

            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedSolarEnergy]">
                    <i class="fa-solid fa-solar-panel" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedSolarEnergy.ToString("0.00") kWh
                </TooltipComponent>
            </div>
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedGridEnergy]">
                    <i class="fa-solid fa-bolt" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedGridEnergy.ToString("0.00") kWh
                </TooltipComponent>
            </div>
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargeCost]">
                    <i class="fa-solid fa-coins" style="width: 25px;"></i> @car.DtoChargeSummary.ChargeCost.ToString("0.00")
                </TooltipComponent>
            </div>

            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="chargeMode">
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargeMode]">
                        ChargeMode:
                    </TooltipComponent>
                </label>
                <InputSelect class="form-select" @bind-Value="@_carBaseSettings[car.CarId].ChargeMode" id="chargeMode" name="chargeMode">
                    @foreach (var value in Enum.GetValues<ChargeMode>())
                    {
                        <option value="@value">@value.ToFriendlyString()</option>
                    }
                </InputSelect>
            </p>

            @if (_carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvAndMinSoc || _carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="minSoc">Min SOC (%):</label>
                    <input class="form-control" value="@_carBaseSettings[car.CarId].MinimumStateOfCharge" type="number" id="minSoc" name="minSoc" min="0" max="100"
               @onchange="@(e => _carBaseSettings[car.CarId].MinimumStateOfCharge = Int32.Parse(e.Value?.ToString() ?? "0"))">
                </p>
            }
            @if (_carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="date">Date:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.ToString("yyyy-MM-dd")" type="date" id="date" name="date"
               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Hour).AddMinutes(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Minute))">
                </p>
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="time">Time:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.ToString("HH:mm")" type="time" id="time" name="time"
               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                </p>
            }
            <p><button class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => UpdateCarSettings(_carBaseSettings[car.CarId])">@_saveButtonTexts[car.CarId]</button></p>
            
            <CollapsePanel CollapsedColor="@_collapsedColor"
                   ExpandedColor="@_expandedColor"
                   HoverColor="@_hoverColor"
                   Disabled="@_isCollapseDisabled"
                   Collapsed="@_collapsedCarDetails.Any(h => h == car.CarId)"
                   ContentHeight="@_height"
                   Animate="@_isAnimated"
                   ShowContentOverflow="@_showOverflow"
                   OnCollapseChanged="(state)=>OnCollapseChanged(state, car.CarId)">
            <CollapsedHeaderContent>
                <div class="w-100">
                    <b>Expand</b>
                    <span class="fa fa-lg fa-chevron-circle-down" aria-hidden="true"></span>
                </div>
            </CollapsedHeaderContent>
            <ExpandedHeaderContent>
                <div class="w-100">
                    <b>Collapse</b>
                    <span class="fa fa-lg fa-chevron-circle-up" aria-hidden="true"></span>
                </div>
            </ExpandedHeaderContent>
            <Content>
                <div style="border: 1px solid gray; height: 100%;">
                    <table>
                        <tr>
                            <th>
                                Topic
                            </th>
                            <th>
                                Value
                            </th>
                        </tr>
                        @if (_carDetailStates.Any(c => c.Key == car.CarId))
                        {
                            @foreach (var carTopicValue in _carDetailStates[car.CarId])
                            {
                                <tr>
                                    <td>
                                        @carTopicValue.Topic
                                    </td>
                                    <td>
                                        @carTopicValue.Value
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <div>Loading, may take about 5 seconds...</div>
                        }
                        
                    </table>
                </div>
            </Content>
        </CollapsePanel>
        </div>
    }

    @if (string.IsNullOrWhiteSpace(_version))
    {
        <p><em>Could not load version</em></p>
    }
    else
    {
        <p><em>Version: <a href="https://github.com/pkuehnel/TeslaSolarCharger/releases/tag/v@_version" target="_blank">@_version</a></em></p>
    }
    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ" />
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1" />
        </div>
    </form>
}



@code {
    private DtoPvValues? _pvValues;
    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;
    private List<DtoCarBaseStates>? _carBaseStates;
    private Dictionary<int, List<DtoCarTopicValue>> _carDetailStates = new Dictionary<int, List<DtoCarTopicValue>>();
    private Dictionary<int, DtoCarBaseSettings>? _carBaseSettings;
    private Dictionary<string, string>? _toolTipTexts;
    private readonly Dictionary<int, string> _saveButtonTexts = new();
    private string _version = "";
    private HashSet<int> _collapsedCarDetails = new HashSet<int>();
    private string _collapsedColor = "LightGray";
    private string _expandedColor = "LightGray";
    private string _hoverColor = "LightGray";
    private bool _isAnimated = true;
    private bool _isCollapseDisabled = false;
    private bool _showOverflow = false;
    private int _height = 0;

    private Timer? _timer;

    private readonly string _saveButtonDefaultText = "Save";
    private readonly string _buttonLoadingText = "...";

    protected override async Task OnInitializedAsync()
    {
        _toolTipTexts = await HttpClient.GetFromJsonAsync<Dictionary<string, string>>("api/Index/GetToolTipTexts").ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        _carBaseStates = await HttpClient.GetFromJsonAsync<List<DtoCarBaseStates>>("api/Index/GetCarBaseValuesOfEnabledCars").ConfigureAwait(false);
        await RefreshPvValues().ConfigureAwait(false);
        _isSolarEdgeInstallation = (await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/Hello/IsSolarEdgeInstallation").ConfigureAwait(false))?.Value;
        _version = await HttpClient.GetStringAsync("api/Hello/ProductVersion").ConfigureAwait(false);
        foreach (var carBaseState in _carBaseStates!)
        {
            _saveButtonTexts.Add(carBaseState.CarId, _saveButtonDefaultText);
            _collapsedCarDetails.Add(carBaseState.CarId);
        }

        _timer = new Timer();
        _timer.Interval = 5000;
        _timer.Elapsed += RefreshStates;
        _timer.Start();
    }

    private async Task RefreshCarBaseStates()
    {
        _carBaseSettings = await HttpClient
            .GetFromJsonAsync<Dictionary<int, DtoCarBaseSettings>>("api/Index/GetCarBaseSettingsOfEnabledCars")
            .ConfigureAwait(false);
    }

    private async Task RefreshPvValues()
    {
        _pvValues = await HttpClient.GetFromJsonAsync<DtoPvValues>("api/Index/GetPvValues").ConfigureAwait(false);
    }

    private async Task UpdateCarSettings(DtoCarBaseSettings dtoCarBaseSettings)
    {
        _saveButtonTexts[dtoCarBaseSettings.CarId] = _buttonLoadingText;
        var result = await HttpClient.PostAsJsonAsync("/api/Index/UpdateCarBaseSettings", dtoCarBaseSettings).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Car Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating car configuration");
        }
        _saveButtonTexts[dtoCarBaseSettings.CarId] = _saveButtonDefaultText;
    }

    private async Task UpdateAllVisableCarDetails()
    {
        if (_carBaseStates == null)
        {
            return;
        }
        var uncollapsedCarIds = new HashSet<int>();
        foreach (var carId in _carBaseStates.Select(s => s.CarId))
        {
            if (!_collapsedCarDetails.Any(c => c == carId))
            {
                uncollapsedCarIds.Add(carId);
            }
        }
        foreach (var carId in uncollapsedCarIds)
        {
            var carDetailStates = await HttpClient.GetFromJsonAsync<List<DtoCarTopicValue>>($"api/Index/CarDetails?carId={carId}").ConfigureAwait(false);
            if (carDetailStates == default)
            {
                continue;
            }
            _carDetailStates[carId] = carDetailStates;
        }
            
    }

    private Task OnCollapseChanged(bool changedToCollapse, int carId)
    {
        if (changedToCollapse)
        {
            _collapsedCarDetails.Add(carId);
        }
        else
        {
            _collapsedCarDetails.Remove(carId);
            _carDetailStates.Remove(carId);
        }
        return Task.CompletedTask;
    }

    private async void RefreshStates(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        try
        {
            await RefreshPvValues().ConfigureAwait(false);
            await RefreshCarBaseStates().ConfigureAwait(false);
            await UpdateAllVisableCarDetails().ConfigureAwait(false);
            _couldNotRefreshStates = false;
        }
        catch (Exception)
        {
            _couldNotRefreshStates = true;
        }
        this.StateHasChanged();
    }
}