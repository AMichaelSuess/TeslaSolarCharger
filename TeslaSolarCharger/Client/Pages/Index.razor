@page "/"
@using System.Globalization
@using System.Timers
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.CarValues
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Dtos.Settings
@using TeslaSolarCharger.Shared.Enums
@inject HttpClient HttpClient
@inject IToastService ToastService

<PageTitle>Tesla Solar Charger</PageTitle>

<BackendIssueValidation></BackendIssueValidation>

@if (_pvValues != null)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_couldNotRefreshStates == true)
        {
            <small class="form-text text-muted">States could not be refreshed. Are you currently offline?</small>
        }
        @if (_isSolarEdgeInstallation == true)
        {
            <small class="form-text text-muted">As you are using SolarEdge which is rate limited, these values might be delayed or grid power and batterypower might be displayed as zero or your configured Home Battery charging power (W). This is nothing to worry about, it is just a way to handle the rate limitation.</small>
        }
        @if (_pvValues.InverterPower != null)
        {
            <div><i class="fa-solid fa-solar-panel" style="width: 25px;"></i>@_pvValues.InverterPower W</div>
        }
        <div class="@(_pvValues.GridPower > 0 ? "text-success" : "text-danger")">
            <i class="fa-solid fa-bolt" style="width: 25px;"></i>
            @if (_pvValues.GridPower != null)
            {
                @Math.Abs((int)_pvValues.GridPower)
            }
            W
        </div>
        @if (_pvValues.HomeBatterySoc != null)
        {
            <div><i class="fa-solid fa-battery-full" style="width: 25px;"></i>@_pvValues.HomeBatterySoc %</div>
        }
        @if (_pvValues.HomeBatteryPower != null)
        {
            <div class="@(_pvValues.HomeBatteryPower < 0 ? "text-danger" : "text-success")">
                <i class="fa-solid fa-battery-full" style="width: 25px;"></i>
                @if (_pvValues.HomeBatteryPower != null)
                {
                    @Math.Abs((int)_pvValues.HomeBatteryPower)
                }
                W
            </div>
        }
        <div><i class="fa-solid fa-car" style="width: 25px;"></i>@_pvValues.CarCombinedChargingPowerAtHome W</div>
    </div>
}

@if (_carBaseStates == null || _carBaseSettings == null)
{
    <div class="spinner"></div>
}
else
{


    @if (_carBaseStates.Count < 1)
    {
        <p>
            You need to enable TeslaSolarCharger for at least one car in the <a href="/CarSettings">car settings page</a>.
        </p>
    }
    @foreach (var car in _carBaseStates)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div><b>@(car.NameOrVin)</b>: @(car.StateOfCharge)% (@(car.StateOfChargeLimit)%) @car.HomeChargePower W</div>
            @if (car.IsHealthy == false)
            {
                <i class="fa-solid fa-circle-exclamation"></i>
            }
            <div><i class="fa-solid fa-solar-panel" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedSolarEnergy.ToString("0.00") kWh</div>
            <div><i class="fa-solid fa-bolt" style="width: 25px;"></i> @car.DtoChargeSummary.ChargedGridEnergy.ToString("0.00") kWh</div>
            <div><i class="fa-solid fa-coins" style="width: 25px;"></i> @car.DtoChargeSummary.ChargeCost.ToString("0.00")</div>

            <p>
                <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="chargeMode">ChargeMode:</label>
                <InputSelect @bind-Value="@_carBaseSettings[car.CarId].ChargeMode" id="chargeMode" name="chargeMode">

                    @foreach (var value in Enum.GetValues<ChargeMode>())
                    {
                        <option value="@value">@value.ToFriendlyString()</option>
                    }
                </InputSelect>
            </p>

            @if (_carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvAndMinSoc || _carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="minSoc">Min SOC (%):</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@_carBaseSettings[car.CarId].MinimumStateOfCharge" type="number" id="minSoc" name="minSoc" min="0" max="100"
               @onchange="@(e => _carBaseSettings[car.CarId].MinimumStateOfCharge = Int32.Parse(e.Value?.ToString() ?? "0"))">
                </p>
            }
            @if (_carBaseSettings[car.CarId].ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="date">Date:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.ToString("yyyy-MM-dd")" type="date" id="date" name="date"
               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Hour).AddMinutes(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Minute))">
                </p>
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="time">Time:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.ToString("HH:mm")" type="time" id="time" name="time"
               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                </p>
            }
            <p><button class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => UpdateCarSettings(_carBaseSettings[car.CarId])">@_saveButtonTexts[car.CarId]</button></p>

        </div>
    }

    <h2>Details: </h2>

    @foreach (var car in _carsToDisplay)
    {
        <p>
            <table>
                <tr>
                    <th>
                        Topic
                    </th>
                    <th>
                        Value
                    </th>
                </tr>
                <tr>
                    <td>
                        Id
                    </td>
                    <td>
                        @car.Id
                    </td>
                </tr>
                <tr>
                    <td>
                        Name
                    </td>
                    <td>
                        @car.CarState.Name
                    </td>
                </tr>
                <tr>
                    <td>
                        Actual Current
                    </td>
                    <td>
                        @car.CarState.ChargerActualCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        Requested Current
                    </td>
                    <td>
                        @car.CarState.ChargerRequestedCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        Pilot Current
                    </td>
                    <td>
                        @car.CarState.ChargerPilotCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        Charger phases (returned value from car)
                    </td>
                    <td>
                        @car.CarState.ChargerPhases
                    </td>
                </tr>
                <tr>
                    <td>
                        Actual Phases (assumed value based on charger phases)
                    </td>
                    <td>
                        @car.CarState.ActualPhases
                    </td>
                </tr>
                <tr>
                    <td>
                        StateString
                    </td>
                    <td>
                        @car.CarState.StateString
                    </td>
                </tr>
                <tr>
                    <td>
                        AutoFullspeedCharging
                    </td>
                    <td>
                        @car.CarState.AutoFullSpeedCharge
                    </td>
                </tr>
                <tr>
                    <td>
                        LatestTimeToReachSoC
                    </td>
                    <td>
                        @(car.CarConfiguration.LatestTimeToReachSoC.ToString("HH:mm dd.MM"))
                    </td>
                </tr>
                <tr>
                    <td>
                        Full charge in
                    </td>
                    <td>
                        @if (car.CarState.TimeUntilFullCharge > TimeSpan.Zero)
                        {
                            @((car.CarState.TimeUntilFullCharge?.Days > 0 ? $"{car.CarState.TimeUntilFullCharge?.Days}. " : "") + $"{car.CarState.TimeUntilFullCharge?.Hours:D2}:{car.CarState.TimeUntilFullCharge?.Minutes:D2}")
                        }
                    </td>
                </tr>
                <tr>
                    <td>
                        Full charge at
                    </td>
                    <td>
                        @if (car.CarState.TimeUntilFullCharge > TimeSpan.Zero)
                        {
                            @((DateTime.Now + car.CarState.TimeUntilFullCharge).Value.ToString("HH:mm dd.MM"))
                        }
                    </td>
                </tr>
                <tr>
                    <td>
                        SoC
                    </td>
                    <td>
                        @car.CarState.SoC
                    </td>
                </tr>
                <tr>
                    <td>
                        SoC Limit
                    </td>
                    <td>
                        @car.CarState.SocLimit
                    </td>
                </tr>
                <tr>
                    <td>
                        Charge mode
                    </td>
                    <td>
                        @car.CarConfiguration.ChargeMode.ToString()
                    </td>
                </tr>
                <tr>
                    <td>
                        Geofence
                    </td>
                    <td>
                        @car.CarState.Geofence
                    </td>
                </tr>
                <tr>
                    <td>
                        Earliest Charge start
                    </td>
                    <td>
                        @car.CarState.EarliestSwitchOn
                    </td>
                </tr>
                <tr>
                    <td>
                        Earliest charge stop
                    </td>
                    <td>
                        @car.CarState.EarliestSwitchOff
                    </td>
                </tr>
                <tr>
                    <td>
                        Car Healthy
                    </td>
                    <td>
                        @car.CarState.Healthy
                    </td>
                </tr>
            </table>
        </p>

    }
    @if (string.IsNullOrWhiteSpace(_version))
    {
        <p><em>Could not load version</em></p>
    }
    else
    {
        <p><em>Version: <a href="https://github.com/pkuehnel/TeslaSolarCharger/releases/tag/v@_version" target="_blank">@_version</a></em></p>
    }
    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ" />
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1" />
        </div>
    </form>
}



@code {
    private Settings? _settings;
    private DtoPvValues? _pvValues;
    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;
    private List<Car>? _carsToDisplay;
    private List<DtoCarBaseStates>? _carBaseStates;
    private Dictionary<int, DtoCarBaseSettings>? _carBaseSettings;
    private Dictionary<int, string> _chargemodeChangeButtonTexts = new Dictionary<int, string>();
    private Dictionary<int, string> _saveButtonTexts = new Dictionary<int, string>();
    private string _version = "";

    private Timer? _timer;

    private readonly string _chargeModeChangeButtonDefaultText = "Change";
    private readonly string _saveButtonDefaultText = "Save";
    private readonly string _buttonLoadingText = "...";

    protected override async Task OnInitializedAsync()
    {
        _settings = await HttpClient.GetFromJsonAsync<Settings>("api/Config/GetSettings").ConfigureAwait(false);
        _carBaseSettings = await HttpClient.GetFromJsonAsync<Dictionary<int, DtoCarBaseSettings>>("api/Index/GetCarBaseSettingsOfEnabledCars").ConfigureAwait(false);
        _carBaseStates = await HttpClient.GetFromJsonAsync<List<DtoCarBaseStates>>("api/Index/GetCarBaseValuesOfEnabledCars").ConfigureAwait(false);
        await UpdatePvValues().ConfigureAwait(false);
        _isSolarEdgeInstallation = (await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/Hello/IsSolarEdgeInstallation").ConfigureAwait(false))?.Value;
        _carsToDisplay = _settings!.Cars.Where(c => c.CarConfiguration.ShouldBeManaged == true).ToList();
        _version = await HttpClient.GetStringAsync("api/Hello/ProductVersion").ConfigureAwait(false);
        foreach (var car in _settings!.Cars)
        {
            _chargemodeChangeButtonTexts.Add(car.Id, _chargeModeChangeButtonDefaultText);
            _saveButtonTexts.Add(car.Id, _saveButtonDefaultText);
        }

        _timer = new Timer();
        _timer.Interval = 5000;
        _timer.Elapsed += RefreshStates;
        _timer.Start();
    }

    private async Task UpdatePvValues()
    {
        _pvValues = await HttpClient.GetFromJsonAsync<DtoPvValues>("api/Index/GetPvValues").ConfigureAwait(false);
    }

    private async Task ChangeChargeMode(int carId)
    {
        _chargemodeChangeButtonTexts[carId] = _buttonLoadingText;
        var updateBackend = HttpClient.PostAsync($"api/Config/ChangeChargeMode?carId={carId}", new StringContent(string.Empty));
        var car = _settings?.Cars.First(c => c.Id == carId);
        var result = await updateBackend.ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("ChargeMode Changed");
            car!.CarConfiguration.ChargeMode = car.CarConfiguration.ChargeMode.Next();
        }
        else
        {
            ToastService.ShowError("Error changing ChargeMode");
        }
        _chargemodeChangeButtonTexts[carId] = _chargeModeChangeButtonDefaultText;
    }

    private async Task UpdateCarSettings(DtoCarBaseSettings dtoCarBaseSettings)
    {
        _saveButtonTexts[dtoCarBaseSettings.CarId] = _buttonLoadingText;
        var result = await HttpClient.PostAsJsonAsync("/api/Index/UpdateCarBaseSettings", dtoCarBaseSettings).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Car Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating car configuration");
        }
        _saveButtonTexts[dtoCarBaseSettings.CarId] = _saveButtonDefaultText;
    }

    private async void RefreshStates(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        try
        {
            await UpdatePvValues().ConfigureAwait(false);
            var tmpSettings = await HttpClient.GetFromJsonAsync<Settings>("api/Config/GetSettings").ConfigureAwait(false);
            _settings!.InverterPower = tmpSettings!.InverterPower;
            _settings.Overage = tmpSettings.Overage;
            _settings!.HomeBatterySoc = tmpSettings.HomeBatterySoc;
            _settings.HomeBatteryPower = tmpSettings.HomeBatteryPower;
            foreach (var car in _carsToDisplay!)
            {
                var tmpCar = tmpSettings.Cars.First(c => c.Id == car.Id);
                car.CarState = tmpCar.CarState;
            }
            _couldNotRefreshStates = false;
        }
        catch (Exception)
        {
            _couldNotRefreshStates = true;
        }
        this.StateHasChanged();
    }
}