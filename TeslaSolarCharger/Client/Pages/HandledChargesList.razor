@page "/HandledCharges/{carId:int}"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Helper.Contracts
@inject HttpClient HttpClient
@inject IStringHelper StringHelper

<h1>HandledChargesList</h1>

@if (_handledCharges == null)
{
    <div class="spinner"></div>
}
else
{
    <MudDataGrid Items="_handledCharges" Groupable="true" Filterable="true" Hover="true">
        <Columns>
            <PropertyColumn Property="x => x.StartTime"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.StartTime))"></PropertyColumn>
            <PropertyColumn Property="x => x.CalculatedPrice"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.CalculatedPrice))"
                            AggregateDefinition="_calculatedPriceAggregation">
            </PropertyColumn>
            <PropertyColumn Property="x => x.PricePerKwh"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.PricePerKwh))"
                            AggregateDefinition="_pricePerKwhAggregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedGridEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedGridEnergy))"
                            AggregateDefinition="_usedGridEnergyAggrregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedSolarEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedSolarEnergy))"
                            AggregateDefinition="_usedSolarEnergyAggrregation"></PropertyColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter]
    public int CarId { get; set; }

    private List<DtoHandledCharge>? _handledCharges;
    private AggregateDefinition<DtoHandledCharge> _calculatedPriceAggregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "Sum: {value}",
    };

    private AggregateDefinition<DtoHandledCharge> _pricePerKwhAggregation = new AggregateDefinition<DtoHandledCharge>()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var averagePricePerKwh = x.Average(z => z.PricePerKwh);
                var resultString = $"Average: {averagePricePerKwh:F3}";
                return resultString;
            }
        };

    private AggregateDefinition<DtoHandledCharge> _usedSolarEnergyAggrregation = new AggregateDefinition<DtoHandledCharge>()
        {
            Type = AggregateType.Sum,
            DisplayFormat = "Sum: {value}",
        };

    private AggregateDefinition<DtoHandledCharge> _usedGridEnergyAggrregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "Sum: {value}",
    };

    protected override async Task OnInitializedAsync()
    {
        _handledCharges = await HttpClient.GetFromJsonAsync<List<DtoHandledCharge>>($"api/ChargingCost/GetHandledCharges?carId={CarId}").ConfigureAwait(false) ?? new List<DtoHandledCharge>();
    }
}
