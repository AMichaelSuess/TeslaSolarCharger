@page "/ChargePrice/detail/{chargeCostId:int}"
@page "/ChargePrice/new"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Contracts
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDateTimeProvider DateTimeProvider

<button class="btn btn-primary" @onclick="NavigateToList">All Charge costs</button>
<h1>ChargePriceDetail</h1>

@if (ChargePrice == null)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="ChargePrice" OnValidSubmit="@SaveChargePrice">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputComponent ValueId="chargePriceId"
                        LabelText="ID"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="chargePriceId" @bind-Value="ChargePrice.Id" class="form-control" placeholder=" " readonly />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="date"
                        LabelText="Valid Since"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputDate id="date" @bind-Value="ChargePrice.ValidSince" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="solarPrice"
                        LabelText="Solar Price"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="solarPrice" @bind-Value="ChargePrice.SolarPrice" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="gridPrice"
                        LabelText="@(ChargePrice.AddSpotPriceToGridPrice ? "Base Price (Spot price will be added to this price)" : "Grid Price")"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="gridPrice" @bind-Value="ChargePrice.GridPrice" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        <div class="mb-3">
            <InputCheckbox class="form-check-input" id="useSpotPrice1" @bind-Value="ChargePrice.AddSpotPriceToGridPrice" />
            <label class="form-check-label" for="useSpotPrice1">
                Use Spot Prices
            </label>
            <div>
                <small id="UseSpotPriceHelp" class="form-text text-muted">Enable this if you are using dynamic prices based on EPEX Spot DE (e.g. Tibber or aWATTar)</small>
            </div>
        </div>
        @if (ChargePrice.AddSpotPriceToGridPrice)
        {
            <InputComponent ValueId="chargePriceSurcharge"
                    LabelText="Additional costs to spotprice"
                    UnitText="%"
                    HelpText="Surcharge to spot price (e.g. aWATTar 3% + 19% VAT in Germany). Note: Spot prices are without VAT.">
                <InputFragment>
                    <InputNumber id="chargePriceSurcharge" @bind-Value="ChargePrice.SpotPriceSurcharge" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>
        }
        <br/>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}


@code {
    [Parameter]
    public int? ChargeCostId { get; set; }

    private DtoChargePrice? ChargePrice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ChargeCostId != null)
        {
            ChargePrice = await HttpClient.GetFromJsonAsync<DtoChargePrice>($"api/ChargingCost/GetChargePriceById?id={ChargeCostId}").ConfigureAwait(false);
        }
        else
        {
            ChargePrice = new DtoChargePrice()
            {
                ValidSince = DateTimeProvider.Now(),
                GridPrice = new decimal(0.285),
                SolarPrice = new decimal(0.12),
            };
        }
    }

    void NavigateToList()
    {
        NavigationManager.NavigateTo("/ChargePrices");
    }

    private async Task SaveChargePrice()
    {
        await HttpClient.PostAsJsonAsync("api/ChargingCost/UpdateChargePrice", ChargePrice).ConfigureAwait(false);
        NavigateToList();
    }
}
