@page "/ChargePrice/detail/{chargeCostId:int}"
@page "/ChargePrice/new"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using System.Globalization
@using TeslaSolarCharger.Shared.Contracts
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDateTimeProvider DateTimeProvider

<button class="btn btn-primary" @onclick="NavigateToList">All Charge costs</button>
<h3>ChargePriceDetail</h3>

@if (ChargePrice == null)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="ChargePrice" OnValidSubmit="@SaveChargePrice">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-12 row">
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">Id</label>
            <span class="col-6 col-sm-6 col-md-3 col-lg-2"> @ChargePrice.Id </span>
        </div>
        <div class="col-12 row">
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">Valid Since</label>
            <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@ChargePrice.ValidSince.ToString("yyyy-MM-dd")" type="date" id="date" name="date"
                   @onchange="@(e => ChargePrice.ValidSince = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)))">
        </div>
        <div class="col-12 row">
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">Solar Price</label>
            <input type="number" class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@ChargePrice.SolarPrice" placeholder="@(((decimal)0).ToString("0.0000"))" id="solarPrice" name="solarPrice" step=".0001">
        </div>
        <div class="col-12 row">
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">Grid Price</label>
            <input type="number" class="col-6 col-sm-6 col-md-3 col-lg-2" @bind="@ChargePrice.GridPrice" placeholder="@(((decimal)0).ToString("0.0000"))" id="gridPrice" name="gridPrice" step=".0001">
        </div>
        <br/>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}


@code {
    [Parameter]
    public int? ChargeCostId { get; set; }

    private DtoChargePrice? ChargePrice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChargePrice = new DtoChargePrice()
        {
            ValidSince = DateTimeProvider.Now(),
        };
        if (ChargeCostId != null)
        {
            ChargePrice = await HttpClient.GetFromJsonAsync<DtoChargePrice>($"api/ChargingCost/GetChargePriceById?id={ChargeCostId}").ConfigureAwait(false);
        }
    }

    void NavigateToList()
    {
        NavigationManager.NavigateTo("/ChargePrices");
    }

    private async Task SaveChargePrice()
    {
        await HttpClient.PostAsJsonAsync("api/ChargingCost/UpdateChargePrice", ChargePrice).ConfigureAwait(false);
        NavigateToList();
    }
}
